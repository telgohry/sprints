
LED-squence-v2.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d68  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d1  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082b  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004aa  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fa  00000000  00000000  0000293e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
  54:	6e 00       	.word	0x006e	; ????
  56:	7e 00       	.word	0x007e	; ????
  58:	83 00       	.word	0x0083	; ????
  5a:	88 00       	.word	0x0088	; ????
  5c:	8d 00       	.word	0x008d	; ????
  5e:	92 00       	.word	0x0092	; ????
  60:	97 00       	.word	0x0097	; ????
  62:	9c 00       	.word	0x009c	; ????
  64:	a1 00       	.word	0x00a1	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_clear_bss>:
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 36       	cpi	r26, 0x61	; 97
  7e:	b2 07       	cpc	r27, r18
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  86:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <APP_init>:
uint8_t state_number = 0;

// Functions Implementation 
EN_APP_ErrorState_t  APP_init(void)
{
	LED_init(LED_PORT, LED_1_PIN);
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	81 e4       	ldi	r24, 0x41	; 65
  92:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	LED_init(LED_PORT, LED_2_PIN);
  96:	62 e0       	ldi	r22, 0x02	; 2
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	LED_init(LED_PORT, LED_3_PIN);
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	LED_init(LED_PORT, LED_4_PIN);
  a6:	64 e0       	ldi	r22, 0x04	; 4
  a8:	81 e4       	ldi	r24, 0x41	; 65
  aa:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	
	BUTTON_init(BUTTON_PORT, BUTTON_PIN);
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	83 e4       	ldi	r24, 0x43	; 67
  b2:	0e 94 bd 00 	call	0x17a	; 0x17a <BUTTON_init>
	
	/* Enable global interrupts */
	sei();
  b6:	78 94       	sei
		
	/* Choose the external interrupt sense - sense on rising edge*/
	MCUCR |= (1<<0) | (1<<1);
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	85 bf       	out	0x35, r24	; 53
		
	/* Enable External Interrupt 0 - INT0 */
	GICR |= (1<<6);
  be:	8b b7       	in	r24, 0x3b	; 59
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8b bf       	out	0x3b, r24	; 59
	
	return APP_OK;
}
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret

000000c8 <APP_start>:
EN_APP_ErrorState_t  APP_start(void)
{

	while(1)
	{
		switch(state_number)
  c8:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	e9 30       	cpi	r30, 0x09	; 9
  d0:	f1 05       	cpc	r31, r1
  d2:	d0 f7       	brcc	.-12     	; 0xc8 <APP_start>
  d4:	e6 5d       	subi	r30, 0xD6	; 214
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__tablejump2__>
		{
			case 0:
				LED_off(LED_PORT, LED_1_PIN);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	81 e4       	ldi	r24, 0x41	; 65
  e0:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
				LED_off(LED_PORT, LED_1_PIN);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
				LED_off(LED_PORT, LED_1_PIN);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
				LED_off(LED_PORT, LED_1_PIN);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
			case 1:
				LED_on(LED_PORT, LED_1_PIN);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 c9 00 	call	0x192	; 0x192 <LED_on>
				break;
 104:	e1 cf       	rjmp	.-62     	; 0xc8 <APP_start>
			case 2:
				LED_on(LED_PORT, LED_2_PIN);
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	0e 94 c9 00 	call	0x192	; 0x192 <LED_on>
				break;
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <APP_start>
			case 3:
				LED_on(LED_PORT, LED_3_PIN);
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 c9 00 	call	0x192	; 0x192 <LED_on>
				break;
 118:	d7 cf       	rjmp	.-82     	; 0xc8 <APP_start>
			case 4:
				LED_on(LED_PORT, LED_4_PIN);
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 c9 00 	call	0x192	; 0x192 <LED_on>
				break;
 122:	d2 cf       	rjmp	.-92     	; 0xc8 <APP_start>
			case 5:
				LED_off(LED_PORT, LED_1_PIN);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
				break;
 12c:	cd cf       	rjmp	.-102    	; 0xc8 <APP_start>
			case 6:
				LED_off(LED_PORT, LED_2_PIN);
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	81 e4       	ldi	r24, 0x41	; 65
 132:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
				break;
 136:	c8 cf       	rjmp	.-112    	; 0xc8 <APP_start>
			case 7:
				LED_off(LED_PORT, LED_3_PIN);
 138:	63 e0       	ldi	r22, 0x03	; 3
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
				break;
 140:	c3 cf       	rjmp	.-122    	; 0xc8 <APP_start>
			case 8:
				LED_off(LED_PORT, LED_4_PIN);
 142:	64 e0       	ldi	r22, 0x04	; 4
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_off>
			break;
 14a:	be cf       	rjmp	.-132    	; 0xc8 <APP_start>

0000014c <__vector_1>:
	
	return APP_OK;
}

ISR(EXT_INT_0)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
	if(state_number < NUMBER_OF_STATES)
 158:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15c:	88 30       	cpi	r24, 0x08	; 8
 15e:	20 f4       	brcc	.+8      	; 0x168 <__vector_1+0x1c>
	{
		state_number++;
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 166:	03 c0       	rjmp	.+6      	; 0x16e <__vector_1+0x22>
	}
	else
	{
		state_number = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <BUTTON_init>:


// Functions Implementation
EN_BUTTON_ErrorState_t  BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	if(DIO_init(buttonPort, buttonPin, IN) == DIO_OK)
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DIO_init>
 180:	81 11       	cpse	r24, r1
	{
		return BUTTON_OK;
	}
	else
	{
		return BUTTON_ERROR;
 182:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 184:	08 95       	ret

00000186 <LED_init>:


// Functions Implementation
EN_LED_ErrorState_t  LED_init(uint8_t ledPort, uint8_t ledPin)
{
	if (DIO_init(ledPort, ledPin, OUT) == DIO_OK)
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <DIO_init>
 18c:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 18e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 190:	08 95       	ret

00000192 <LED_on>:
EN_LED_ErrorState_t  LED_on(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, HIGH) == DIO_OK)
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_write>
 198:	81 11       	cpse	r24, r1
	{
		return LED_OK;	
	}
	else
	{
		return LED_ERROR;
 19a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 19c:	08 95       	ret

0000019e <LED_off>:
EN_LED_ErrorState_t  LED_off(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, LOW) == DIO_OK)
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_write>
 1a4:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 1a8:	08 95       	ret

000001aa <main>:
#include "Application/application.h"


int main(void)
{
    APP_init();
 1aa:	0e 94 47 00 	call	0x8e	; 0x8e <APP_init>
	APP_start();	
 1ae:	0e 94 64 00 	call	0xc8	; 0xc8 <APP_start>
}
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret

000001b8 <DIO_init>:
#include "dio.h"

// Functions Implementation
EN_DIO_ErrorState_t  DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 1b8:	82 34       	cpi	r24, 0x42	; 66
 1ba:	49 f1       	breq	.+82     	; 0x20e <DIO_init+0x56>
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <DIO_init+0xc>
 1be:	81 34       	cpi	r24, 0x41	; 65
 1c0:	41 f0       	breq	.+16     	; 0x1d2 <DIO_init+0x1a>
 1c2:	7d c0       	rjmp	.+250    	; 0x2be <DIO_init+0x106>
 1c4:	83 34       	cpi	r24, 0x43	; 67
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_init+0x12>
 1c8:	40 c0       	rjmp	.+128    	; 0x24a <DIO_init+0x92>
 1ca:	84 34       	cpi	r24, 0x44	; 68
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_init+0x18>
 1ce:	5a c0       	rjmp	.+180    	; 0x284 <DIO_init+0xcc>
 1d0:	76 c0       	rjmp	.+236    	; 0x2be <DIO_init+0x106>
	{
		case PORT_A:
			if(direction == IN)
 1d2:	41 11       	cpse	r20, r1
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <DIO_init+0x38>
			{
				CLEAR_BIT(DDRA,pinNumber);
 1d6:	2a b3       	in	r18, 0x1a	; 26
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_init+0x2a>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_init+0x26>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
		case PORT_A:
			if(direction == IN)
			{
				CLEAR_BIT(DDRA,pinNumber);
			}
			else if(direction == OUT)
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <DIO_init+0x3e>
 1f4:	66 c0       	rjmp	.+204    	; 0x2c2 <DIO_init+0x10a>
			{
				SET_BIT(DDRA,pinNumber);
 1f6:	2a b3       	in	r18, 0x1a	; 26
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_init+0x4a>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_init+0x46>
 206:	82 2b       	or	r24, r18
 208:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
			
		case PORT_B:
			if(direction == IN)
 20e:	41 11       	cpse	r20, r1
 210:	0d c0       	rjmp	.+26     	; 0x22c <DIO_init+0x74>
			{
				CLEAR_BIT(DDRB,pinNumber);
 212:	27 b3       	in	r18, 0x17	; 23
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_init+0x66>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_init+0x62>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	08 95       	ret
		case PORT_B:
			if(direction == IN)
			{
				CLEAR_BIT(DDRB,pinNumber);
			}
			else if(direction == OUT)
 22c:	41 30       	cpi	r20, 0x01	; 1
 22e:	09 f0       	breq	.+2      	; 0x232 <DIO_init+0x7a>
 230:	4a c0       	rjmp	.+148    	; 0x2c6 <DIO_init+0x10e>
			{
				SET_BIT(DDRB,pinNumber);
 232:	27 b3       	in	r18, 0x17	; 23
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_init+0x86>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_init+0x82>
 242:	82 2b       	or	r24, r18
 244:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
			
		case PORT_C:
			if(direction == IN)
 24a:	41 11       	cpse	r20, r1
 24c:	0d c0       	rjmp	.+26     	; 0x268 <DIO_init+0xb0>
			{
				CLEAR_BIT(DDRC,pinNumber);
 24e:	24 b3       	in	r18, 0x14	; 20
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_init+0xa2>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_init+0x9e>
 25e:	80 95       	com	r24
 260:	82 23       	and	r24, r18
 262:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	08 95       	ret
		case PORT_C:
			if(direction == IN)
			{
				CLEAR_BIT(DDRC,pinNumber);
			}
			else if(direction == OUT)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	79 f5       	brne	.+94     	; 0x2ca <DIO_init+0x112>
			{
				SET_BIT(DDRC,pinNumber);
 26c:	24 b3       	in	r18, 0x14	; 20
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_init+0xc0>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_init+0xbc>
 27c:	82 2b       	or	r24, r18
 27e:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
			
		case PORT_D:
			if(direction == IN)
 284:	41 11       	cpse	r20, r1
 286:	0d c0       	rjmp	.+26     	; 0x2a2 <DIO_init+0xea>
			{
				CLEAR_BIT(DDRD,pinNumber);
 288:	21 b3       	in	r18, 0x11	; 17
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_init+0xdc>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_init+0xd8>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret
		case PORT_D:
			if(direction == IN)
			{
				CLEAR_BIT(DDRD,pinNumber);
			}
			else if(direction == OUT)
 2a2:	41 30       	cpi	r20, 0x01	; 1
 2a4:	a1 f4       	brne	.+40     	; 0x2ce <DIO_init+0x116>
			{
				SET_BIT(DDRD,pinNumber);
 2a6:	21 b3       	in	r18, 0x11	; 17
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_init+0xfa>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_init+0xf6>
 2b6:	82 2b       	or	r24, r18
 2b8:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret
	}
	
	return DIO_ERROR;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	08 95       	ret
			{
				SET_BIT(DDRA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret
			{
				SET_BIT(DDRB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret
			{
				SET_BIT(DDRC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	08 95       	ret
			{
				SET_BIT(DDRD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}
	
	return DIO_ERROR;
}
 2d0:	08 95       	ret

000002d2 <DIO_write>:

EN_DIO_ErrorState_t  DIO_write(uint8_t portNumber, uint8_t pinNumber,uint8_t value)
{
	switch(portNumber)
 2d2:	82 34       	cpi	r24, 0x42	; 66
 2d4:	49 f1       	breq	.+82     	; 0x328 <DIO_write+0x56>
 2d6:	18 f4       	brcc	.+6      	; 0x2de <DIO_write+0xc>
 2d8:	81 34       	cpi	r24, 0x41	; 65
 2da:	41 f0       	breq	.+16     	; 0x2ec <DIO_write+0x1a>
 2dc:	7d c0       	rjmp	.+250    	; 0x3d8 <DIO_write+0x106>
 2de:	83 34       	cpi	r24, 0x43	; 67
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <DIO_write+0x12>
 2e2:	40 c0       	rjmp	.+128    	; 0x364 <DIO_write+0x92>
 2e4:	84 34       	cpi	r24, 0x44	; 68
 2e6:	09 f4       	brne	.+2      	; 0x2ea <DIO_write+0x18>
 2e8:	5a c0       	rjmp	.+180    	; 0x39e <DIO_write+0xcc>
 2ea:	76 c0       	rjmp	.+236    	; 0x3d8 <DIO_write+0x106>
	{
		case PORT_A:
			if(value == LOW)
 2ec:	41 11       	cpse	r20, r1
 2ee:	0d c0       	rjmp	.+26     	; 0x30a <DIO_write+0x38>
			{
				CLEAR_BIT(PORTA,pinNumber);
 2f0:	2b b3       	in	r18, 0x1b	; 27
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_write+0x2a>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_write+0x26>
 300:	80 95       	com	r24
 302:	82 23       	and	r24, r18
 304:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	08 95       	ret
		case PORT_A:
			if(value == LOW)
			{
				CLEAR_BIT(PORTA,pinNumber);
			}
			else if(value == HIGH)
 30a:	41 30       	cpi	r20, 0x01	; 1
 30c:	09 f0       	breq	.+2      	; 0x310 <DIO_write+0x3e>
 30e:	66 c0       	rjmp	.+204    	; 0x3dc <DIO_write+0x10a>
			{
				SET_BIT(PORTA,pinNumber);
 310:	2b b3       	in	r18, 0x1b	; 27
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_write+0x4a>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_write+0x46>
 320:	82 2b       	or	r24, r18
 322:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
		
		case PORT_B:
			if(value == LOW)
 328:	41 11       	cpse	r20, r1
 32a:	0d c0       	rjmp	.+26     	; 0x346 <DIO_write+0x74>
			{
				CLEAR_BIT(PORTB,pinNumber);
 32c:	28 b3       	in	r18, 0x18	; 24
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_write+0x66>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_write+0x62>
 33c:	80 95       	com	r24
 33e:	82 23       	and	r24, r18
 340:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
		case PORT_B:
			if(value == LOW)
			{
				CLEAR_BIT(PORTB,pinNumber);
			}
			else if(value == HIGH)
 346:	41 30       	cpi	r20, 0x01	; 1
 348:	09 f0       	breq	.+2      	; 0x34c <DIO_write+0x7a>
 34a:	4a c0       	rjmp	.+148    	; 0x3e0 <DIO_write+0x10e>
			{
				SET_BIT(PORTB,pinNumber);
 34c:	28 b3       	in	r18, 0x18	; 24
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0x86>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0x82>
 35c:	82 2b       	or	r24, r18
 35e:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
		
		case PORT_C:
			if(value == LOW)
 364:	41 11       	cpse	r20, r1
 366:	0d c0       	rjmp	.+26     	; 0x382 <DIO_write+0xb0>
			{
				CLEAR_BIT(PORTC,pinNumber);
 368:	25 b3       	in	r18, 0x15	; 21
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_write+0xa2>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_write+0x9e>
 378:	80 95       	com	r24
 37a:	82 23       	and	r24, r18
 37c:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret
		case PORT_C:
			if(value == LOW)
			{
				CLEAR_BIT(PORTC,pinNumber);
			}
			else if(value == HIGH)
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	79 f5       	brne	.+94     	; 0x3e4 <DIO_write+0x112>
			{
				SET_BIT(PORTC,pinNumber);
 386:	25 b3       	in	r18, 0x15	; 21
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_write+0xc0>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_write+0xbc>
 396:	82 2b       	or	r24, r18
 398:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	08 95       	ret
		
		case PORT_D:
			if(value == LOW)
 39e:	41 11       	cpse	r20, r1
 3a0:	0d c0       	rjmp	.+26     	; 0x3bc <DIO_write+0xea>
			{
				CLEAR_BIT(PORTD,pinNumber);
 3a2:	22 b3       	in	r18, 0x12	; 18
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_write+0xdc>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_write+0xd8>
 3b2:	80 95       	com	r24
 3b4:	82 23       	and	r24, r18
 3b6:	82 bb       	out	0x12, r24	; 18
			{
				return DIO_ERROR;
			}
	}	
	
	return DIO_OK;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
		case PORT_D:
			if(value == LOW)
			{
				CLEAR_BIT(PORTD,pinNumber);
			}
			else if(value == HIGH)
 3bc:	41 30       	cpi	r20, 0x01	; 1
 3be:	a1 f4       	brne	.+40     	; 0x3e8 <DIO_write+0x116>
			{
				SET_BIT(PORTD,pinNumber);
 3c0:	22 b3       	in	r18, 0x12	; 18
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_write+0xfa>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_write+0xf6>
 3d0:	82 2b       	or	r24, r18
 3d2:	82 bb       	out	0x12, r24	; 18
			{
				return DIO_ERROR;
			}
	}	
	
	return DIO_OK;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	08 95       	ret
			{
				SET_BIT(PORTA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	08 95       	ret
			{
				SET_BIT(PORTB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret
			{
				SET_BIT(PORTC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	08 95       	ret
			{
				SET_BIT(PORTD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
			}
	}	
	
	return DIO_OK;
}
 3ea:	08 95       	ret

000003ec <__tablejump2__>:
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	05 90       	lpm	r0, Z+
 3f2:	f4 91       	lpm	r31, Z
 3f4:	e0 2d       	mov	r30, r0
 3f6:	09 94       	ijmp

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
