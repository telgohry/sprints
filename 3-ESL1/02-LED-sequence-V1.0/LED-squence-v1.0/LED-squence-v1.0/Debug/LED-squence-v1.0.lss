
LED-squence-v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000540  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010fd  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087c  00000000  00000000  000017e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000984  00000000  00000000  00002061  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  000029e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053b  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e8  00000000  00000000  0000308b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	71 00       	.word	0x0071	; ????
  56:	82 00       	.word	0x0082	; ????
  58:	93 00       	.word	0x0093	; ????
  5a:	a4 00       	.word	0x00a4	; ????
  5c:	b5 00       	.word	0x00b5	; ????
  5e:	c6 00       	.word	0x00c6	; ????
  60:	d7 00       	.word	0x00d7	; ????
  62:	e8 00       	.word	0x00e8	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  74:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
// Global variables

// Functions Implementation 
EN_APP_ErrorState_t  APP_init(void)
{
	LED_init(LED_PORT, LED_1_PIN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 2a 01 	call	0x254	; 0x254 <LED_init>
	LED_init(LED_PORT, LED_2_PIN);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 2a 01 	call	0x254	; 0x254 <LED_init>
	LED_init(LED_PORT, LED_3_PIN);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 2a 01 	call	0x254	; 0x254 <LED_init>
	LED_init(LED_PORT, LED_4_PIN);
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 2a 01 	call	0x254	; 0x254 <LED_init>
	
	BUTTON_init(BUTTON_PORT, BUTTON_PIN);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	83 e4       	ldi	r24, 0x43	; 67
  a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <BUTTON_init>
	
	return APP_OK;
}
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	08 95       	ret

000000a8 <APP_start>:

EN_APP_ErrorState_t  APP_start(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	1f 92       	push	r1
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t buttonState = LOW; 
  b2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t pressNumber = 0;
  b4:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
			BUTTON_GetState(BUTTON_PORT, BUTTON_PIN, &buttonState);
  b6:	ae 01       	movw	r20, r28
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	83 e4       	ldi	r24, 0x43	; 67
  c0:	0e 94 00 01 	call	0x200	; 0x200 <BUTTON_GetState>

			if(Pressed == buttonState)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	81 11       	cpse	r24, r1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <APP_start+0x24>
			{
				pressNumber++;
  ca:	1f 5f       	subi	r17, 0xFF	; 255
			}
			
			switch(pressNumber)
  cc:	81 2f       	mov	r24, r17
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	e8 30       	cpi	r30, 0x08	; 8
  d6:	f1 05       	cpc	r31, r1
  d8:	70 f7       	brcc	.-36     	; 0xb6 <APP_start+0xe>
  da:	e6 5d       	subi	r30, 0xD6	; 214
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	0c 94 98 02 	jmp	0x530	; 0x530 <__tablejump2__>
			{
				case 1:
				LED_on(LED_PORT, LED_1_PIN);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_off(LED_PORT, LED_2_PIN);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_3_PIN);
  f2:	62 e0       	ldi	r22, 0x02	; 2
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_4_PIN);
  fa:	63 e0       	ldi	r22, 0x03	; 3
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				break;
 102:	d9 cf       	rjmp	.-78     	; 0xb6 <APP_start+0xe>
				case 2:
				LED_on(LED_PORT, LED_1_PIN);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_2_PIN);
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_off(LED_PORT, LED_3_PIN);
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_4_PIN);
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				break;
 124:	c8 cf       	rjmp	.-112    	; 0xb6 <APP_start+0xe>
				case 3:
				LED_on(LED_PORT, LED_1_PIN);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_2_PIN);
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	81 e4       	ldi	r24, 0x41	; 65
 132:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_3_PIN);
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_off(LED_PORT, LED_4_PIN);
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				break;
 146:	b7 cf       	rjmp	.-146    	; 0xb6 <APP_start+0xe>
				case 4:
				LED_on(LED_PORT, LED_1_PIN);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_2_PIN);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_3_PIN);
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	81 e4       	ldi	r24, 0x41	; 65
 15c:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_4_PIN);
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	81 e4       	ldi	r24, 0x41	; 65
 164:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				break;
 168:	a6 cf       	rjmp	.-180    	; 0xb6 <APP_start+0xe>
				case 5:
				LED_off(LED_PORT, LED_1_PIN);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_on(LED_PORT, LED_2_PIN);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_3_PIN);
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_4_PIN);
 182:	63 e0       	ldi	r22, 0x03	; 3
 184:	81 e4       	ldi	r24, 0x41	; 65
 186:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				break;
 18a:	95 cf       	rjmp	.-214    	; 0xb6 <APP_start+0xe>
				case 6:
				LED_off(LED_PORT, LED_1_PIN);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_2_PIN);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_on(LED_PORT, LED_3_PIN);
 19c:	62 e0       	ldi	r22, 0x02	; 2
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				LED_on(LED_PORT, LED_4_PIN);
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	81 e4       	ldi	r24, 0x41	; 65
 1a8:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				break;
 1ac:	84 cf       	rjmp	.-248    	; 0xb6 <APP_start+0xe>
				case 7:
				LED_off(LED_PORT, LED_1_PIN);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_2_PIN);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_3_PIN);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_on(LED_PORT, LED_4_PIN);
 1c6:	63 e0       	ldi	r22, 0x03	; 3
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	0e 94 30 01 	call	0x260	; 0x260 <LED_on>
				break;
 1ce:	73 cf       	rjmp	.-282    	; 0xb6 <APP_start+0xe>
				case 8:
				LED_off(LED_PORT, LED_1_PIN);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_2_PIN);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e4       	ldi	r24, 0x41	; 65
 1dc:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_3_PIN);
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	81 e4       	ldi	r24, 0x41	; 65
 1e4:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				LED_off(LED_PORT, LED_4_PIN);
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	81 e4       	ldi	r24, 0x41	; 65
 1ec:	0e 94 36 01 	call	0x26c	; 0x26c <LED_off>
				pressNumber = 0;
 1f0:	10 e0       	ldi	r17, 0x00	; 0
				break;
 1f2:	61 cf       	rjmp	.-318    	; 0xb6 <APP_start+0xe>

000001f4 <BUTTON_init>:


// Functions Implementation
EN_BUTTON_ErrorState_t  BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	if(DIO_init(buttonPort, buttonPin, IN) == DIO_OK)
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	0e 94 43 01 	call	0x286	; 0x286 <DIO_init>
 1fa:	81 11       	cpse	r24, r1
	{
		return BUTTON_OK;
	}
	else
	{
		return BUTTON_ERROR;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 1fe:	08 95       	ret

00000200 <BUTTON_GetState>:



//button state in not related
Button_state  BUTTON_GetState(uint8_t buttonPort, uint8_t buttonPin,uint8_t *value)
{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	18 2f       	mov	r17, r24
 20a:	06 2f       	mov	r16, r22
 20c:	ea 01       	movw	r28, r20
	Button_state ret_val = Not_Pressed;
	DIO_read(buttonPort, buttonPin, value);
 20e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <DIO_read>
	if(*value == Button_Sense_Pressed)
 212:	88 81       	ld	r24, Y
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	b1 f4       	brne	.+44     	; 0x244 <BUTTON_GetState+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	2f e7       	ldi	r18, 0x7F	; 127
 21a:	88 e3       	ldi	r24, 0x38	; 56
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <BUTTON_GetState+0x1e>
 226:	00 c0       	rjmp	.+0      	; 0x228 <BUTTON_GetState+0x28>
 228:	00 00       	nop
	{
		 _delay_ms(Debuncing_Ms);
		 DIO_read(buttonPort, buttonPin, value);
 22a:	ae 01       	movw	r20, r28
 22c:	60 2f       	mov	r22, r16
 22e:	81 2f       	mov	r24, r17
 230:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <DIO_read>
		 if(*value == Button_Sense_Pressed)
 234:	88 81       	ld	r24, Y
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	11 f4       	brne	.+4      	; 0x23e <BUTTON_GetState+0x3e>
		 {
			 *value = Pressed;
 23a:	18 82       	st	Y, r1
 23c:	05 c0       	rjmp	.+10     	; 0x248 <BUTTON_GetState+0x48>
		 }
		 else
		 {
			 *value = Not_Pressed;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	88 83       	st	Y, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <BUTTON_GetState+0x48>
		 }
	}
	else
	{
		*value = Not_Pressed;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	88 83       	st	Y, r24
	}
	return  ret_val;
}
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <LED_init>:


// Functions Implementation
EN_LED_ErrorState_t  LED_init(uint8_t ledPort, uint8_t ledPin)
{
	if (DIO_init(ledPort, ledPin, OUT) == DIO_OK)
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	0e 94 43 01 	call	0x286	; 0x286 <DIO_init>
 25a:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 25c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 25e:	08 95       	ret

00000260 <LED_on>:
EN_LED_ErrorState_t  LED_on(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, HIGH) == DIO_OK)
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_write>
 266:	81 11       	cpse	r24, r1
	{
		return LED_OK;	
	}
	else
	{
		return LED_ERROR;
 268:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 26a:	08 95       	ret

0000026c <LED_off>:
EN_LED_ErrorState_t  LED_off(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, LOW) == DIO_OK)
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_write>
 272:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 274:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 276:	08 95       	ret

00000278 <main>:
#include "Application/application.h"


int main(void)
{
    APP_init();
 278:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();	
 27c:	0e 94 54 00 	call	0xa8	; 0xa8 <APP_start>
}
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	08 95       	ret

00000286 <DIO_init>:
#include "dio.h"

// Functions Implementation
EN_DIO_ErrorState_t  DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 286:	82 34       	cpi	r24, 0x42	; 66
 288:	49 f1       	breq	.+82     	; 0x2dc <DIO_init+0x56>
 28a:	18 f4       	brcc	.+6      	; 0x292 <DIO_init+0xc>
 28c:	81 34       	cpi	r24, 0x41	; 65
 28e:	41 f0       	breq	.+16     	; 0x2a0 <DIO_init+0x1a>
 290:	7d c0       	rjmp	.+250    	; 0x38c <DIO_init+0x106>
 292:	83 34       	cpi	r24, 0x43	; 67
 294:	09 f4       	brne	.+2      	; 0x298 <DIO_init+0x12>
 296:	40 c0       	rjmp	.+128    	; 0x318 <DIO_init+0x92>
 298:	84 34       	cpi	r24, 0x44	; 68
 29a:	09 f4       	brne	.+2      	; 0x29e <DIO_init+0x18>
 29c:	5a c0       	rjmp	.+180    	; 0x352 <DIO_init+0xcc>
 29e:	76 c0       	rjmp	.+236    	; 0x38c <DIO_init+0x106>
	{
		case PORT_A:
			if(direction == IN)
 2a0:	41 11       	cpse	r20, r1
 2a2:	0d c0       	rjmp	.+26     	; 0x2be <DIO_init+0x38>
			{
				CLEAR_BIT(DDRA,pinNumber);
 2a4:	2a b3       	in	r18, 0x1a	; 26
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_init+0x2a>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	6a 95       	dec	r22
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_init+0x26>
 2b4:	80 95       	com	r24
 2b6:	82 23       	and	r24, r18
 2b8:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret
		case PORT_A:
			if(direction == IN)
			{
				CLEAR_BIT(DDRA,pinNumber);
			}
			else if(direction == OUT)
 2be:	41 30       	cpi	r20, 0x01	; 1
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <DIO_init+0x3e>
 2c2:	65 c0       	rjmp	.+202    	; 0x38e <DIO_init+0x108>
			{
				SET_BIT(DDRA,pinNumber);
 2c4:	2a b3       	in	r18, 0x1a	; 26
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_init+0x4a>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_init+0x46>
 2d4:	82 2b       	or	r24, r18
 2d6:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret
			
		case PORT_B:
			if(direction == IN)
 2dc:	41 11       	cpse	r20, r1
 2de:	0d c0       	rjmp	.+26     	; 0x2fa <DIO_init+0x74>
			{
				CLEAR_BIT(DDRB,pinNumber);
 2e0:	27 b3       	in	r18, 0x17	; 23
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_init+0x66>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_init+0x62>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	08 95       	ret
		case PORT_B:
			if(direction == IN)
			{
				CLEAR_BIT(DDRB,pinNumber);
			}
			else if(direction == OUT)
 2fa:	41 30       	cpi	r20, 0x01	; 1
 2fc:	09 f0       	breq	.+2      	; 0x300 <DIO_init+0x7a>
 2fe:	49 c0       	rjmp	.+146    	; 0x392 <DIO_init+0x10c>
			{
				SET_BIT(DDRB,pinNumber);
 300:	27 b3       	in	r18, 0x17	; 23
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_init+0x86>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_init+0x82>
 310:	82 2b       	or	r24, r18
 312:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
			
		case PORT_C:
			if(direction == IN)
 318:	41 11       	cpse	r20, r1
 31a:	0d c0       	rjmp	.+26     	; 0x336 <DIO_init+0xb0>
			{
				CLEAR_BIT(DDRC,pinNumber);
 31c:	24 b3       	in	r18, 0x14	; 20
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_init+0xa2>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_init+0x9e>
 32c:	80 95       	com	r24
 32e:	82 23       	and	r24, r18
 330:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	08 95       	ret
		case PORT_C:
			if(direction == IN)
			{
				CLEAR_BIT(DDRC,pinNumber);
			}
			else if(direction == OUT)
 336:	41 30       	cpi	r20, 0x01	; 1
 338:	71 f5       	brne	.+92     	; 0x396 <DIO_init+0x110>
			{
				SET_BIT(DDRC,pinNumber);
 33a:	24 b3       	in	r18, 0x14	; 20
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_init+0xc0>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_init+0xbc>
 34a:	82 2b       	or	r24, r18
 34c:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
			
		case PORT_D:
			if(direction == IN)
 352:	41 11       	cpse	r20, r1
 354:	0d c0       	rjmp	.+26     	; 0x370 <DIO_init+0xea>
			{
				CLEAR_BIT(DDRD,pinNumber);
 356:	21 b3       	in	r18, 0x11	; 17
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_init+0xdc>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_init+0xd8>
 366:	80 95       	com	r24
 368:	82 23       	and	r24, r18
 36a:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret
		case PORT_D:
			if(direction == IN)
			{
				CLEAR_BIT(DDRD,pinNumber);
			}
			else if(direction == OUT)
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	99 f4       	brne	.+38     	; 0x39a <DIO_init+0x114>
			{
				SET_BIT(DDRD,pinNumber);
 374:	21 b3       	in	r18, 0x11	; 17
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_init+0xfa>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_init+0xf6>
 384:	82 2b       	or	r24, r18
 386:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
	}
}
 38c:	08 95       	ret
			{
				SET_BIT(DDRA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	08 95       	ret
			{
				SET_BIT(DDRB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	08 95       	ret
			{
				SET_BIT(DDRC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	08 95       	ret
			{
				SET_BIT(DDRD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 39a:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}
}
 39c:	08 95       	ret

0000039e <DIO_write>:

EN_DIO_ErrorState_t  DIO_write(uint8_t portNumber, uint8_t pinNumber,uint8_t value)
{
	switch(portNumber)
 39e:	82 34       	cpi	r24, 0x42	; 66
 3a0:	49 f1       	breq	.+82     	; 0x3f4 <DIO_write+0x56>
 3a2:	18 f4       	brcc	.+6      	; 0x3aa <DIO_write+0xc>
 3a4:	81 34       	cpi	r24, 0x41	; 65
 3a6:	41 f0       	breq	.+16     	; 0x3b8 <DIO_write+0x1a>
 3a8:	7d c0       	rjmp	.+250    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 3aa:	83 34       	cpi	r24, 0x43	; 67
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <DIO_write+0x12>
 3ae:	40 c0       	rjmp	.+128    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3b0:	84 34       	cpi	r24, 0x44	; 68
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <DIO_write+0x18>
 3b4:	5a c0       	rjmp	.+180    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 3b6:	76 c0       	rjmp	.+236    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
	{
		case PORT_A:
			if(value == LOW)
 3b8:	41 11       	cpse	r20, r1
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <DIO_write+0x38>
			{
				CLEAR_BIT(PORTA,pinNumber);
 3bc:	2b b3       	in	r18, 0x1b	; 27
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_write+0x2a>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_write+0x26>
 3cc:	80 95       	com	r24
 3ce:	82 23       	and	r24, r18
 3d0:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
		case PORT_A:
			if(value == LOW)
			{
				CLEAR_BIT(PORTA,pinNumber);
			}
			else if(value == HIGH)
 3d6:	41 30       	cpi	r20, 0x01	; 1
 3d8:	09 f0       	breq	.+2      	; 0x3dc <DIO_write+0x3e>
 3da:	65 c0       	rjmp	.+202    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
			{
				SET_BIT(PORTA,pinNumber);
 3dc:	2b b3       	in	r18, 0x1b	; 27
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_write+0x4a>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_write+0x46>
 3ec:	82 2b       	or	r24, r18
 3ee:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
		
		case PORT_B:
			if(value == LOW)
 3f4:	41 11       	cpse	r20, r1
 3f6:	0d c0       	rjmp	.+26     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
			{
				CLEAR_BIT(PORTB,pinNumber);
 3f8:	28 b3       	in	r18, 0x18	; 24
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	82 23       	and	r24, r18
 40c:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	08 95       	ret
		case PORT_B:
			if(value == LOW)
			{
				CLEAR_BIT(PORTB,pinNumber);
			}
			else if(value == HIGH)
 412:	41 30       	cpi	r20, 0x01	; 1
 414:	09 f0       	breq	.+2      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 416:	49 c0       	rjmp	.+146    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
			{
				SET_BIT(PORTB,pinNumber);
 418:	28 b3       	in	r18, 0x18	; 24
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	82 2b       	or	r24, r18
 42a:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
		
		case PORT_C:
			if(value == LOW)
 430:	41 11       	cpse	r20, r1
 432:	0d c0       	rjmp	.+26     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			{
				CLEAR_BIT(PORTC,pinNumber);
 434:	25 b3       	in	r18, 0x15	; 21
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
		case PORT_C:
			if(value == LOW)
			{
				CLEAR_BIT(PORTC,pinNumber);
			}
			else if(value == HIGH)
 44e:	41 30       	cpi	r20, 0x01	; 1
 450:	71 f5       	brne	.+92     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			{
				SET_BIT(PORTC,pinNumber);
 452:	25 b3       	in	r18, 0x15	; 21
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	82 2b       	or	r24, r18
 464:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	08 95       	ret
		
		case PORT_D:
			if(value == LOW)
 46a:	41 11       	cpse	r20, r1
 46c:	0d c0       	rjmp	.+26     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
			{
				CLEAR_BIT(PORTD,pinNumber);
 46e:	22 b3       	in	r18, 0x12	; 18
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	80 95       	com	r24
 480:	82 23       	and	r24, r18
 482:	82 bb       	out	0x12, r24	; 18
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	08 95       	ret
		case PORT_D:
			if(value == LOW)
			{
				CLEAR_BIT(PORTD,pinNumber);
			}
			else if(value == HIGH)
 488:	41 30       	cpi	r20, 0x01	; 1
 48a:	99 f4       	brne	.+38     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
				SET_BIT(PORTD,pinNumber);
 48c:	22 b3       	in	r18, 0x12	; 18
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	82 2b       	or	r24, r18
 49e:	82 bb       	out	0x12, r24	; 18
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret
	}	
}
 4a4:	08 95       	ret
			{
				SET_BIT(PORTA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	08 95       	ret
			{
				SET_BIT(PORTB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	08 95       	ret
			{
				SET_BIT(PORTC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
			{
				SET_BIT(PORTD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}	
}
 4b4:	08 95       	ret

000004b6 <DIO_read>:

EN_DIO_ErrorState_t  DIO_read(uint8_t portNumber, uint8_t pinNumber,uint8_t *value)
{
	switch(portNumber)
 4b6:	82 34       	cpi	r24, 0x42	; 66
 4b8:	a9 f0       	breq	.+42     	; 0x4e4 <DIO_read+0x2e>
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <DIO_read+0xc>
 4bc:	81 34       	cpi	r24, 0x41	; 65
 4be:	31 f0       	breq	.+12     	; 0x4cc <DIO_read+0x16>
 4c0:	35 c0       	rjmp	.+106    	; 0x52c <DIO_read+0x76>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	d9 f0       	breq	.+54     	; 0x4fc <DIO_read+0x46>
 4c6:	84 34       	cpi	r24, 0x44	; 68
 4c8:	29 f1       	breq	.+74     	; 0x514 <DIO_read+0x5e>
 4ca:	30 c0       	rjmp	.+96     	; 0x52c <DIO_read+0x76>
	{
		case PORT_A:
			*value = GET_BIT(PINA, pinNumber);
 4cc:	89 b3       	in	r24, 0x19	; 25
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_read+0x20>
 4d2:	95 95       	asr	r25
 4d4:	87 95       	ror	r24
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_read+0x1c>
 4da:	81 70       	andi	r24, 0x01	; 1
 4dc:	fa 01       	movw	r30, r20
 4de:	80 83       	st	Z, r24
			return DIO_OK;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
		
		case PORT_B:
			*value = GET_BIT(PINB, pinNumber);
 4e4:	86 b3       	in	r24, 0x16	; 22
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_read+0x38>
 4ea:	95 95       	asr	r25
 4ec:	87 95       	ror	r24
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_read+0x34>
 4f2:	81 70       	andi	r24, 0x01	; 1
 4f4:	fa 01       	movw	r30, r20
 4f6:	80 83       	st	Z, r24
			return DIO_OK;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
		
		case PORT_C:
			*value = GET_BIT(PINC, pinNumber);
 4fc:	83 b3       	in	r24, 0x13	; 19
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_read+0x50>
 502:	95 95       	asr	r25
 504:	87 95       	ror	r24
 506:	6a 95       	dec	r22
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_read+0x4c>
 50a:	81 70       	andi	r24, 0x01	; 1
 50c:	fa 01       	movw	r30, r20
 50e:	80 83       	st	Z, r24
			return DIO_OK;
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
		
		case PORT_D:
			*value = GET_BIT(PIND, pinNumber);
 514:	80 b3       	in	r24, 0x10	; 16
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_read+0x68>
 51a:	95 95       	asr	r25
 51c:	87 95       	ror	r24
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_read+0x64>
 522:	81 70       	andi	r24, 0x01	; 1
 524:	fa 01       	movw	r30, r20
 526:	80 83       	st	Z, r24
			return DIO_OK;
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
			
		default:
			return DIO_ERROR; 
 52c:	81 e0       	ldi	r24, 0x01	; 1
	}	
}
 52e:	08 95       	ret

00000530 <__tablejump2__>:
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	05 90       	lpm	r0, Z+
 536:	f4 91       	lpm	r31, Z
 538:	e0 2d       	mov	r30, r0
 53a:	09 94       	ijmp

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
