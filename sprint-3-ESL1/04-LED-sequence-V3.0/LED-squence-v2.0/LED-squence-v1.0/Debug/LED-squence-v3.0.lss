
LED-squence-v3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000592  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000606  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000606  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000606  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c5b  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007be  00000000  00000000  000013af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086d  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078f  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003197  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_1>
   8:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_2>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_11>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	c7 00       	.word	0x00c7	; ????
  56:	ca 00       	.word	0x00ca	; ????
  58:	cd 00       	.word	0x00cd	; ????
  5a:	d0 00       	.word	0x00d0	; ????
  5c:	d3 00       	.word	0x00d3	; ????
  5e:	d5 00       	.word	0x00d5	; ????
  60:	d7 00       	.word	0x00d7	; ????
  62:	d9 00       	.word	0x00d9	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a4 36       	cpi	r26, 0x64	; 100
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 91 01 	call	0x322	; 0x322 <main>
  84:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <timer_delay>:


volatile uint32_t overflow;

void timer_delay(uint32_t delay)
{
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	ac 01       	movw	r20, r24
	overflow=0;
  92:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <overflow+0x1>
  96:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <overflow>
	TCNT0=0;
  9a:	12 be       	out	0x32, r1	; 50
	SET_BIT(TCCR0, 1);
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	83 bf       	out	0x33, r24	; 51
	while((delay*1000UL) > (overflow*256UL + TCNT0 + 1));
  a2:	9a 01       	movw	r18, r20
  a4:	a8 ee       	ldi	r26, 0xE8	; 232
  a6:	b3 e0       	ldi	r27, 0x03	; 3
  a8:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
  ac:	8b 01       	movw	r16, r22
  ae:	9c 01       	movw	r18, r24
  b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow>
  b4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <overflow+0x1>
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	ba 2f       	mov	r27, r26
  be:	a9 2f       	mov	r26, r25
  c0:	98 2f       	mov	r25, r24
  c2:	88 27       	eor	r24, r24
  c4:	62 b7       	in	r22, 0x32	; 50
  c6:	86 0f       	add	r24, r22
  c8:	91 1d       	adc	r25, r1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	a1 1d       	adc	r26, r1
  d2:	b1 1d       	adc	r27, r1
  d4:	80 17       	cp	r24, r16
  d6:	91 07       	cpc	r25, r17
  d8:	a2 07       	cpc	r26, r18
  da:	b3 07       	cpc	r27, r19
  dc:	10 f3       	brcs	.-60     	; 0xa2 <timer_delay+0x16>
	TCCR0 = 0x00;
  de:	13 be       	out	0x33, r1	; 51
}
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	08 95       	ret

000000e6 <APP_init>:

// Functions Implementation 
EN_APP_ErrorState_t  APP_init(void)
{
	LED_init(LED_PORT, LED_1_PIN);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_init>
	LED_init(LED_PORT, LED_2_PIN);
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_init>
	LED_init(LED_PORT, LED_3_PIN);
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_init>
	LED_init(LED_PORT, LED_4_PIN);
  fe:	64 e0       	ldi	r22, 0x04	; 4
 100:	81 e4       	ldi	r24, 0x41	; 65
 102:	0e 94 7f 01 	call	0x2fe	; 0x2fe <LED_init>
	
	//BUTTON_init(BUTTON_PORT, BUTTON_PIN);
			
	/* Choose the external interrupt sense - sense on rising edge*/
	MCUCR |= (1<<0) | (1<<1);
 106:	85 b7       	in	r24, 0x35	; 53
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	85 bf       	out	0x35, r24	; 53
	
	MCUCR |= (1<<2) | (1<<3);
 10c:	85 b7       	in	r24, 0x35	; 53
 10e:	8c 60       	ori	r24, 0x0C	; 12
 110:	85 bf       	out	0x35, r24	; 53
		
	/* Enable External Interrupt 0 - INT0 */
	GICR |= (1<<6);
 112:	8b b7       	in	r24, 0x3b	; 59
 114:	80 64       	ori	r24, 0x40	; 64
 116:	8b bf       	out	0x3b, r24	; 59
	
	GICR |= (1<<7);
 118:	8b b7       	in	r24, 0x3b	; 59
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8b bf       	out	0x3b, r24	; 59
	
	SET_BIT(TIMSK, 0);
 11e:	89 b7       	in	r24, 0x39	; 57
 120:	81 60       	ori	r24, 0x01	; 1
 122:	89 bf       	out	0x39, r24	; 57
	
	/* Enable global interrupts */
	sei();
 124:	78 94       	sei
	
	return APP_OK;
}
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <APP_start>:

EN_APP_ErrorState_t  APP_start(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	28 97       	sbiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	uint8_t pin;
	uint8_t pins[4] = {LED_1_PIN, LED_2_PIN, LED_3_PIN, LED_4_PIN};
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	89 83       	std	Y+1, r24	; 0x01
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	8a 83       	std	Y+2, r24	; 0x02
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	8b 83       	std	Y+3, r24	; 0x03
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t on;
	uint8_t off;
	uint8_t blink[4] = {0};
	uint8_t leds[4]={0};
 14e:	1d 82       	std	Y+5, r1	; 0x05
 150:	1e 82       	std	Y+6, r1	; 0x06
 152:	1f 82       	std	Y+7, r1	; 0x07
 154:	18 86       	std	Y+8, r1	; 0x08
	
	while(1)
	{
		for(uint8_t i=0; i<4; i++)
 156:	10 e0       	ldi	r17, 0x00	; 0
 158:	0b c0       	rjmp	.+22     	; 0x170 <APP_start+0x46>
		{
			LED_off(LED_PORT, pins[i]);
 15a:	e1 e0       	ldi	r30, 0x01	; 1
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	e1 0f       	add	r30, r17
 164:	f1 1d       	adc	r31, r1
 166:	60 81       	ld	r22, Z
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	0e 94 8b 01 	call	0x316	; 0x316 <LED_off>
	uint8_t blink[4] = {0};
	uint8_t leds[4]={0};
	
	while(1)
	{
		for(uint8_t i=0; i<4; i++)
 16e:	1f 5f       	subi	r17, 0xFF	; 255
 170:	14 30       	cpi	r17, 0x04	; 4
 172:	98 f3       	brcs	.-26     	; 0x15a <APP_start+0x30>
		{
			LED_off(LED_PORT, pins[i]);
		}
		
		switch(state_number)
 174:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <state_number>
 178:	8e 2f       	mov	r24, r30
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	e8 30       	cpi	r30, 0x08	; 8
 182:	f1 05       	cpc	r31, r1
 184:	b8 f4       	brcc	.+46     	; 0x1b4 <APP_start+0x8a>
 186:	e6 5d       	subi	r30, 0xD6	; 214
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	0c 94 b2 02 	jmp	0x564	; 0x564 <__tablejump2__>
		{
			case 0:
				
				break;
			case 1:
				leds[0] = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	8d 83       	std	Y+5, r24	; 0x05
				break;
 192:	10 c0       	rjmp	.+32     	; 0x1b4 <APP_start+0x8a>
			case 2:
				leds[1] = 1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	8e 83       	std	Y+6, r24	; 0x06
				break;
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <APP_start+0x8a>
			case 3:
				leds[2] = 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	8f 83       	std	Y+7, r24	; 0x07
				break;
 19e:	0a c0       	rjmp	.+20     	; 0x1b4 <APP_start+0x8a>
			case 4:
				leds[3] = 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	88 87       	std	Y+8, r24	; 0x08
				break;
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <APP_start+0x8a>
			case 5:
				leds[0] = 0;
 1a6:	1d 82       	std	Y+5, r1	; 0x05
				break;
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <APP_start+0x8a>
			case 6:
				leds[1] = 0;
 1aa:	1e 82       	std	Y+6, r1	; 0x06
				break;
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <APP_start+0x8a>
			case 7:
				leds[2] = 0;
 1ae:	1f 82       	std	Y+7, r1	; 0x07
				break;
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <APP_start+0x8a>
			case 8:
				leds[3] = 0;
 1b2:	18 86       	std	Y+8, r1	; 0x08
				break;
		}
		
		switch(blink_state)
 1b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	81 f0       	breq	.+32     	; 0x1dc <APP_start+0xb2>
 1bc:	28 f4       	brcc	.+10     	; 0x1c8 <APP_start+0x9e>
 1be:	88 23       	and	r24, r24
 1c0:	f9 f0       	breq	.+62     	; 0x200 <APP_start+0xd6>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <APP_start+0xa8>
 1c6:	21 c0       	rjmp	.+66     	; 0x20a <APP_start+0xe0>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	71 f0       	breq	.+28     	; 0x1e8 <APP_start+0xbe>
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	91 f0       	breq	.+36     	; 0x1f4 <APP_start+0xca>
 1d0:	1c c0       	rjmp	.+56     	; 0x20a <APP_start+0xe0>
				on=100;
				off=900;
				break;
			case 1:
				on=200;
				off=800;
 1d2:	68 94       	set
 1d4:	ff 24       	eor	r15, r15
 1d6:	f5 f8       	bld	r15, 5
			case 0:
				on=100;
				off=900;
				break;
			case 1:
				on=200;
 1d8:	08 ec       	ldi	r16, 0xC8	; 200
				off=800;
				break;
 1da:	17 c0       	rjmp	.+46     	; 0x20a <APP_start+0xe0>
			case 2:
				on=300;
				off=700;
 1dc:	0f 2e       	mov	r0, r31
 1de:	fc eb       	ldi	r31, 0xBC	; 188
 1e0:	ff 2e       	mov	r15, r31
 1e2:	f0 2d       	mov	r31, r0
			case 1:
				on=200;
				off=800;
				break;
			case 2:
				on=300;
 1e4:	0c e2       	ldi	r16, 0x2C	; 44
				off=700;
				break;
 1e6:	11 c0       	rjmp	.+34     	; 0x20a <APP_start+0xe0>
			case 3:
				on=500;
				off=500;
 1e8:	0f 2e       	mov	r0, r31
 1ea:	f4 ef       	ldi	r31, 0xF4	; 244
 1ec:	ff 2e       	mov	r15, r31
 1ee:	f0 2d       	mov	r31, r0
			case 2:
				on=300;
				off=700;
				break;
			case 3:
				on=500;
 1f0:	04 ef       	ldi	r16, 0xF4	; 244
				off=500;
				break;
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <APP_start+0xe0>
			case 4:
				on=800;
				off=200;
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f8 ec       	ldi	r31, 0xC8	; 200
 1f8:	ff 2e       	mov	r15, r31
 1fa:	f0 2d       	mov	r31, r0
			case 3:
				on=500;
				off=500;
				break;
			case 4:
				on=800;
 1fc:	00 e2       	ldi	r16, 0x20	; 32
				off=200;
				break;
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <APP_start+0xe0>
		
		switch(blink_state)
		{
			case 0:
				on=100;
				off=900;
 200:	0f 2e       	mov	r0, r31
 202:	f4 e8       	ldi	r31, 0x84	; 132
 204:	ff 2e       	mov	r15, r31
 206:	f0 2d       	mov	r31, r0
		}
		
		switch(blink_state)
		{
			case 0:
				on=100;
 208:	04 e6       	ldi	r16, 0x64	; 100
				on=800;
				off=200;
				break;
		}	
		
		for(uint8_t i=0; i<4; i++)
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	16 c0       	rjmp	.+44     	; 0x23a <APP_start+0x110>
		{
			if(leds[i] == 1)
 20e:	81 2f       	mov	r24, r17
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	e5 e0       	ldi	r30, 0x05	; 5
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ec 0f       	add	r30, r28
 218:	fd 1f       	adc	r31, r29
 21a:	e8 0f       	add	r30, r24
 21c:	f9 1f       	adc	r31, r25
 21e:	20 81       	ld	r18, Z
 220:	21 30       	cpi	r18, 0x01	; 1
 222:	51 f4       	brne	.+20     	; 0x238 <APP_start+0x10e>
			{
				LED_on(LED_PORT, pins[i]);
 224:	e1 e0       	ldi	r30, 0x01	; 1
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	ec 0f       	add	r30, r28
 22a:	fd 1f       	adc	r31, r29
 22c:	e8 0f       	add	r30, r24
 22e:	f9 1f       	adc	r31, r25
 230:	60 81       	ld	r22, Z
 232:	81 e4       	ldi	r24, 0x41	; 65
 234:	0e 94 85 01 	call	0x30a	; 0x30a <LED_on>
				on=800;
				off=200;
				break;
		}	
		
		for(uint8_t i=0; i<4; i++)
 238:	1f 5f       	subi	r17, 0xFF	; 255
 23a:	14 30       	cpi	r17, 0x04	; 4
 23c:	40 f3       	brcs	.-48     	; 0x20e <APP_start+0xe4>
				LED_on(LED_PORT, pins[i]);
			}
			
		}
		
		timer_delay(on);
 23e:	80 2f       	mov	r24, r16
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 46 00 	call	0x8c	; 0x8c <timer_delay>
		
		for(uint8_t i=0; i<4; i++)
 246:	10 e0       	ldi	r17, 0x00	; 0
 248:	0b c0       	rjmp	.+22     	; 0x260 <APP_start+0x136>
		{
			LED_off(LED_PORT, pins[i]);
 24a:	e1 e0       	ldi	r30, 0x01	; 1
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ec 0f       	add	r30, r28
 250:	fd 1f       	adc	r31, r29
 252:	e1 0f       	add	r30, r17
 254:	f1 1d       	adc	r31, r1
 256:	60 81       	ld	r22, Z
 258:	81 e4       	ldi	r24, 0x41	; 65
 25a:	0e 94 8b 01 	call	0x316	; 0x316 <LED_off>
			
		}
		
		timer_delay(on);
		
		for(uint8_t i=0; i<4; i++)
 25e:	1f 5f       	subi	r17, 0xFF	; 255
 260:	14 30       	cpi	r17, 0x04	; 4
 262:	98 f3       	brcs	.-26     	; 0x24a <APP_start+0x120>
		{
			LED_off(LED_PORT, pins[i]);
		}
		timer_delay(off);
 264:	8f 2d       	mov	r24, r15
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 46 00 	call	0x8c	; 0x8c <timer_delay>
	}
 26c:	74 cf       	rjmp	.-280    	; 0x156 <APP_start+0x2c>

0000026e <__vector_1>:
	
	return APP_OK;
}

ISR(EXT_INT_0)
{
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	8f 93       	push	r24
	if(state_number < NUMBER_OF_STATES)
 27a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state_number>
 27e:	88 30       	cpi	r24, 0x08	; 8
 280:	30 f4       	brcc	.+12     	; 0x28e <__vector_1+0x20>
	{
		state_number++;
 282:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <state_number>
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state_number>
 28c:	03 c0       	rjmp	.+6      	; 0x294 <__vector_1+0x26>
	}
	else
	{
		state_number = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <state_number>
	}
}
 294:	8f 91       	pop	r24
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_2>:

ISR(EXT_INT_1)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	8f 93       	push	r24
	if(blink_state < NUMBER_OF_BLINK_STATES)
 2ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b0:	85 30       	cpi	r24, 0x05	; 5
 2b2:	30 f4       	brcc	.+12     	; 0x2c0 <__vector_2+0x20>
	{
		blink_state++;
 2b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2b8:	8f 5f       	subi	r24, 0xFF	; 255
 2ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__vector_2+0x24>
	}
	else
	{
		blink_state = 0;
 2c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
 2c4:	8f 91       	pop	r24
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_11>:

ISR(TIMER0_OVF)
{
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
	overflow++;
 2de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <overflow>
 2e2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <overflow+0x1>
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <overflow+0x1>
 2ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <overflow>
}
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <LED_init>:


// Functions Implementation
EN_LED_ErrorState_t  LED_init(uint8_t ledPort, uint8_t ledPin)
{
	if (DIO_init(ledPort, ledPin, OUT) == DIO_OK)
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	0e 94 98 01 	call	0x330	; 0x330 <DIO_init>
 304:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 306:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 308:	08 95       	ret

0000030a <LED_on>:
EN_LED_ErrorState_t  LED_on(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, HIGH) == DIO_OK)
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write>
 310:	81 11       	cpse	r24, r1
	{
		return LED_OK;	
	}
	else
	{
		return LED_ERROR;
 312:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 314:	08 95       	ret

00000316 <LED_off>:
EN_LED_ErrorState_t  LED_off(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, LOW) == DIO_OK)
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_write>
 31c:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 31e:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 320:	08 95       	ret

00000322 <main>:



int main(void)
{
    APP_init();
 322:	0e 94 73 00 	call	0xe6	; 0xe6 <APP_init>
	APP_start();	
 326:	0e 94 95 00 	call	0x12a	; 0x12a <APP_start>
	//TCCR0 = 0x00; 
	//SET_BIT(TIMSK, 0);
	//SET_BIT(TCCR0, 1);
	//sei();

}
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret

00000330 <DIO_init>:
#include "dio.h"

// Functions Implementation
EN_DIO_ErrorState_t  DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 330:	82 34       	cpi	r24, 0x42	; 66
 332:	49 f1       	breq	.+82     	; 0x386 <DIO_init+0x56>
 334:	18 f4       	brcc	.+6      	; 0x33c <DIO_init+0xc>
 336:	81 34       	cpi	r24, 0x41	; 65
 338:	41 f0       	breq	.+16     	; 0x34a <DIO_init+0x1a>
 33a:	7d c0       	rjmp	.+250    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 33c:	83 34       	cpi	r24, 0x43	; 67
 33e:	09 f4       	brne	.+2      	; 0x342 <DIO_init+0x12>
 340:	40 c0       	rjmp	.+128    	; 0x3c2 <DIO_init+0x92>
 342:	84 34       	cpi	r24, 0x44	; 68
 344:	09 f4       	brne	.+2      	; 0x348 <DIO_init+0x18>
 346:	5a c0       	rjmp	.+180    	; 0x3fc <DIO_init+0xcc>
 348:	76 c0       	rjmp	.+236    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	{
		case PORT_A:
			if(direction == IN)
 34a:	41 11       	cpse	r20, r1
 34c:	0d c0       	rjmp	.+26     	; 0x368 <DIO_init+0x38>
			{
				CLEAR_BIT(DDRA,pinNumber);
 34e:	2a b3       	in	r18, 0x1a	; 26
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_init+0x2a>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_init+0x26>
 35e:	80 95       	com	r24
 360:	82 23       	and	r24, r18
 362:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
		case PORT_A:
			if(direction == IN)
			{
				CLEAR_BIT(DDRA,pinNumber);
			}
			else if(direction == OUT)
 368:	41 30       	cpi	r20, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <DIO_init+0x3e>
 36c:	66 c0       	rjmp	.+204    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			{
				SET_BIT(DDRA,pinNumber);
 36e:	2a b3       	in	r18, 0x1a	; 26
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_init+0x4a>
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_init+0x46>
 37e:	82 2b       	or	r24, r18
 380:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
			
		case PORT_B:
			if(direction == IN)
 386:	41 11       	cpse	r20, r1
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <DIO_init+0x74>
			{
				CLEAR_BIT(DDRB,pinNumber);
 38a:	27 b3       	in	r18, 0x17	; 23
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_init+0x66>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_init+0x62>
 39a:	80 95       	com	r24
 39c:	82 23       	and	r24, r18
 39e:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	08 95       	ret
		case PORT_B:
			if(direction == IN)
			{
				CLEAR_BIT(DDRB,pinNumber);
			}
			else if(direction == OUT)
 3a4:	41 30       	cpi	r20, 0x01	; 1
 3a6:	09 f0       	breq	.+2      	; 0x3aa <DIO_init+0x7a>
 3a8:	4a c0       	rjmp	.+148    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				SET_BIT(DDRB,pinNumber);
 3aa:	27 b3       	in	r18, 0x17	; 23
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_init+0x86>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_init+0x82>
 3ba:	82 2b       	or	r24, r18
 3bc:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret
			
		case PORT_C:
			if(direction == IN)
 3c2:	41 11       	cpse	r20, r1
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <DIO_init+0xb0>
			{
				CLEAR_BIT(DDRC,pinNumber);
 3c6:	24 b3       	in	r18, 0x14	; 20
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_init+0xa2>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	6a 95       	dec	r22
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_init+0x9e>
 3d6:	80 95       	com	r24
 3d8:	82 23       	and	r24, r18
 3da:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	08 95       	ret
		case PORT_C:
			if(direction == IN)
			{
				CLEAR_BIT(DDRC,pinNumber);
			}
			else if(direction == OUT)
 3e0:	41 30       	cpi	r20, 0x01	; 1
 3e2:	79 f5       	brne	.+94     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				SET_BIT(DDRC,pinNumber);
 3e4:	24 b3       	in	r18, 0x14	; 20
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_init+0xc0>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_init+0xbc>
 3f4:	82 2b       	or	r24, r18
 3f6:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
			
		case PORT_D:
			if(direction == IN)
 3fc:	41 11       	cpse	r20, r1
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			{
				CLEAR_BIT(DDRD,pinNumber);
 400:	21 b3       	in	r18, 0x11	; 17
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	80 95       	com	r24
 412:	82 23       	and	r24, r18
 414:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
		case PORT_D:
			if(direction == IN)
			{
				CLEAR_BIT(DDRD,pinNumber);
			}
			else if(direction == OUT)
 41a:	41 30       	cpi	r20, 0x01	; 1
 41c:	a1 f4       	brne	.+40     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
			{
				SET_BIT(DDRD,pinNumber);
 41e:	21 b3       	in	r18, 0x11	; 17
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
	}
	
	return DIO_ERROR;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	08 95       	ret
			{
				SET_BIT(DDRA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	08 95       	ret
			{
				SET_BIT(DDRB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	08 95       	ret
			{
				SET_BIT(DDRC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	08 95       	ret
			{
				SET_BIT(DDRD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 446:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}
	
	return DIO_ERROR;
}
 448:	08 95       	ret

0000044a <DIO_write>:

EN_DIO_ErrorState_t  DIO_write(uint8_t portNumber, uint8_t pinNumber,uint8_t value)
{
	switch(portNumber)
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	49 f1       	breq	.+82     	; 0x4a0 <DIO_write+0x56>
 44e:	18 f4       	brcc	.+6      	; 0x456 <DIO_write+0xc>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	41 f0       	breq	.+16     	; 0x464 <DIO_write+0x1a>
 454:	7d c0       	rjmp	.+250    	; 0x550 <DIO_write+0x106>
 456:	83 34       	cpi	r24, 0x43	; 67
 458:	09 f4       	brne	.+2      	; 0x45c <DIO_write+0x12>
 45a:	40 c0       	rjmp	.+128    	; 0x4dc <DIO_write+0x92>
 45c:	84 34       	cpi	r24, 0x44	; 68
 45e:	09 f4       	brne	.+2      	; 0x462 <DIO_write+0x18>
 460:	5a c0       	rjmp	.+180    	; 0x516 <DIO_write+0xcc>
 462:	76 c0       	rjmp	.+236    	; 0x550 <DIO_write+0x106>
	{
		case PORT_A:
			if(value == LOW)
 464:	41 11       	cpse	r20, r1
 466:	0d c0       	rjmp	.+26     	; 0x482 <DIO_write+0x38>
			{
				CLEAR_BIT(PORTA,pinNumber);
 468:	2b b3       	in	r18, 0x1b	; 27
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_write+0x2a>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_write+0x26>
 478:	80 95       	com	r24
 47a:	82 23       	and	r24, r18
 47c:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
		case PORT_A:
			if(value == LOW)
			{
				CLEAR_BIT(PORTA,pinNumber);
			}
			else if(value == HIGH)
 482:	41 30       	cpi	r20, 0x01	; 1
 484:	09 f0       	breq	.+2      	; 0x488 <DIO_write+0x3e>
 486:	66 c0       	rjmp	.+204    	; 0x554 <DIO_write+0x10a>
			{
				SET_BIT(PORTA,pinNumber);
 488:	2b b3       	in	r18, 0x1b	; 27
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_write+0x4a>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_write+0x46>
 498:	82 2b       	or	r24, r18
 49a:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
		
		case PORT_B:
			if(value == LOW)
 4a0:	41 11       	cpse	r20, r1
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <DIO_write+0x74>
			{
				CLEAR_BIT(PORTB,pinNumber);
 4a4:	28 b3       	in	r18, 0x18	; 24
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_write+0x66>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_write+0x62>
 4b4:	80 95       	com	r24
 4b6:	82 23       	and	r24, r18
 4b8:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret
		case PORT_B:
			if(value == LOW)
			{
				CLEAR_BIT(PORTB,pinNumber);
			}
			else if(value == HIGH)
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <DIO_write+0x7a>
 4c2:	4a c0       	rjmp	.+148    	; 0x558 <DIO_write+0x10e>
			{
				SET_BIT(PORTB,pinNumber);
 4c4:	28 b3       	in	r18, 0x18	; 24
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_write+0x86>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_write+0x82>
 4d4:	82 2b       	or	r24, r18
 4d6:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret
		
		case PORT_C:
			if(value == LOW)
 4dc:	41 11       	cpse	r20, r1
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <DIO_write+0xb0>
			{
				CLEAR_BIT(PORTC,pinNumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_write+0xa2>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_write+0x9e>
 4f0:	80 95       	com	r24
 4f2:	82 23       	and	r24, r18
 4f4:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	08 95       	ret
		case PORT_C:
			if(value == LOW)
			{
				CLEAR_BIT(PORTC,pinNumber);
			}
			else if(value == HIGH)
 4fa:	41 30       	cpi	r20, 0x01	; 1
 4fc:	79 f5       	brne	.+94     	; 0x55c <DIO_write+0x112>
			{
				SET_BIT(PORTC,pinNumber);
 4fe:	25 b3       	in	r18, 0x15	; 21
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_write+0xc0>
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_write+0xbc>
 50e:	82 2b       	or	r24, r18
 510:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
		
		case PORT_D:
			if(value == LOW)
 516:	41 11       	cpse	r20, r1
 518:	0d c0       	rjmp	.+26     	; 0x534 <DIO_write+0xea>
			{
				CLEAR_BIT(PORTD,pinNumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_write+0xdc>
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	6a 95       	dec	r22
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_write+0xd8>
 52a:	80 95       	com	r24
 52c:	82 23       	and	r24, r18
 52e:	82 bb       	out	0x12, r24	; 18
			{
				return DIO_ERROR;
			}
	}	
	
	return DIO_OK;
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret
		case PORT_D:
			if(value == LOW)
			{
				CLEAR_BIT(PORTD,pinNumber);
			}
			else if(value == HIGH)
 534:	41 30       	cpi	r20, 0x01	; 1
 536:	a1 f4       	brne	.+40     	; 0x560 <DIO_write+0x116>
			{
				SET_BIT(PORTD,pinNumber);
 538:	22 b3       	in	r18, 0x12	; 18
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_write+0xfa>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_write+0xf6>
 548:	82 2b       	or	r24, r18
 54a:	82 bb       	out	0x12, r24	; 18
			{
				return DIO_ERROR;
			}
	}	
	
	return DIO_OK;
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	08 95       	ret
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret
			{
				SET_BIT(PORTA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	08 95       	ret
			{
				SET_BIT(PORTB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	08 95       	ret
			{
				SET_BIT(PORTC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	08 95       	ret
			{
				SET_BIT(PORTD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 560:	81 e0       	ldi	r24, 0x01	; 1
			}
	}	
	
	return DIO_OK;
}
 562:	08 95       	ret

00000564 <__tablejump2__>:
 564:	ee 0f       	add	r30, r30
 566:	ff 1f       	adc	r31, r31
 568:	05 90       	lpm	r0, Z+
 56a:	f4 91       	lpm	r31, Z
 56c:	e0 2d       	mov	r30, r0
 56e:	09 94       	ijmp

00000570 <__umulhisi3>:
 570:	a2 9f       	mul	r26, r18
 572:	b0 01       	movw	r22, r0
 574:	b3 9f       	mul	r27, r19
 576:	c0 01       	movw	r24, r0
 578:	a3 9f       	mul	r26, r19
 57a:	70 0d       	add	r23, r0
 57c:	81 1d       	adc	r24, r1
 57e:	11 24       	eor	r1, r1
 580:	91 1d       	adc	r25, r1
 582:	b2 9f       	mul	r27, r18
 584:	70 0d       	add	r23, r0
 586:	81 1d       	adc	r24, r1
 588:	11 24       	eor	r1, r1
 58a:	91 1d       	adc	r25, r1
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
