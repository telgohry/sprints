
LED-squence-v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fa6  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c6  00000000  00000000  0000165a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089e  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  000026c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004aa  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000631  00000000  00000000  00002cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	7c 00       	.word	0x007c	; ????
  56:	8d 00       	.word	0x008d	; ????
  58:	9e 00       	.word	0x009e	; ????
  5a:	af 00       	.word	0x00af	; ????
  5c:	c0 00       	.word	0x00c0	; ????
  5e:	d1 00       	.word	0x00d1	; ????
  60:	e2 00       	.word	0x00e2	; ????
  62:	f3 00       	.word	0x00f3	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 22 01 	call	0x244	; 0x244 <main>
  74:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
// Global variables

// Functions Implementation 
EN_APP_ErrorState_t  APP_init(void)
{
	LED_init(LED_PORT, LED_1_PIN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 10 01 	call	0x220	; 0x220 <LED_init>
	LED_init(LED_PORT, LED_2_PIN);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 10 01 	call	0x220	; 0x220 <LED_init>
	LED_init(LED_PORT, LED_3_PIN);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 10 01 	call	0x220	; 0x220 <LED_init>
	LED_init(LED_PORT, LED_4_PIN);
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 10 01 	call	0x220	; 0x220 <LED_init>
	
	BUTTON_init(BUTTON_PORT, BUTTON_PIN);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	83 e4       	ldi	r24, 0x43	; 67
  a0:	0e 94 05 01 	call	0x20a	; 0x20a <BUTTON_init>
	
	return APP_OK;
}
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	08 95       	ret

000000a8 <APP_start>:

EN_APP_ErrorState_t  APP_start(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	1f 92       	push	r1
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t buttonState = LOW; 
  b2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t pressNumber = 0;
  b4:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
			BUTTON_GetState(BUTTON_PORT, BUTTON_PIN, &buttonState);
  b6:	ae 01       	movw	r20, r28
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	83 e4       	ldi	r24, 0x43	; 67
  c0:	0e 94 0b 01 	call	0x216	; 0x216 <BUTTON_GetState>

			if(buttonState == HIGH)
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	61 f4       	brne	.+24     	; 0xe2 <APP_start+0x3a>
  ca:	07 c0       	rjmp	.+14     	; 0xda <APP_start+0x32>
			{
				while(buttonState == HIGH)
				{
					BUTTON_GetState(BUTTON_PORT, BUTTON_PIN, &buttonState);
  cc:	ae 01       	movw	r20, r28
  ce:	4f 5f       	subi	r20, 0xFF	; 255
  d0:	5f 4f       	sbci	r21, 0xFF	; 255
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	83 e4       	ldi	r24, 0x43	; 67
  d6:	0e 94 0b 01 	call	0x216	; 0x216 <BUTTON_GetState>
	{
			BUTTON_GetState(BUTTON_PORT, BUTTON_PIN, &buttonState);

			if(buttonState == HIGH)
			{
				while(buttonState == HIGH)
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	b1 f3       	breq	.-20     	; 0xcc <APP_start+0x24>
				{
					BUTTON_GetState(BUTTON_PORT, BUTTON_PIN, &buttonState);
				}
				pressNumber++;
  e0:	1f 5f       	subi	r17, 0xFF	; 255
			}
			
			switch(pressNumber)
  e2:	81 2f       	mov	r24, r17
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	e8 30       	cpi	r30, 0x08	; 8
  ec:	f1 05       	cpc	r31, r1
  ee:	18 f7       	brcc	.-58     	; 0xb6 <APP_start+0xe>
  f0:	e6 5d       	subi	r30, 0xD6	; 214
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__tablejump2__>
			{
				case 1:
				LED_on(LED_PORT, LED_1_PIN);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_off(LED_PORT, LED_2_PIN);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_3_PIN);
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_4_PIN);
 110:	63 e0       	ldi	r22, 0x03	; 3
 112:	81 e4       	ldi	r24, 0x41	; 65
 114:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				break;
 118:	ce cf       	rjmp	.-100    	; 0xb6 <APP_start+0xe>
				case 2:
				LED_on(LED_PORT, LED_1_PIN);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_2_PIN);
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	81 e4       	ldi	r24, 0x41	; 65
 126:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_off(LED_PORT, LED_3_PIN);
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_4_PIN);
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				break;
 13a:	bd cf       	rjmp	.-134    	; 0xb6 <APP_start+0xe>
				case 3:
				LED_on(LED_PORT, LED_1_PIN);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_2_PIN);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_3_PIN);
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_off(LED_PORT, LED_4_PIN);
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				break;
 15c:	ac cf       	rjmp	.-168    	; 0xb6 <APP_start+0xe>
				case 4:
				LED_on(LED_PORT, LED_1_PIN);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	81 e4       	ldi	r24, 0x41	; 65
 162:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_2_PIN);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	81 e4       	ldi	r24, 0x41	; 65
 16a:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_3_PIN);
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	81 e4       	ldi	r24, 0x41	; 65
 172:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_4_PIN);
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				break;
 17e:	9b cf       	rjmp	.-202    	; 0xb6 <APP_start+0xe>
				case 5:
				LED_off(LED_PORT, LED_1_PIN);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	81 e4       	ldi	r24, 0x41	; 65
 184:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_on(LED_PORT, LED_2_PIN);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	81 e4       	ldi	r24, 0x41	; 65
 18c:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_3_PIN);
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	81 e4       	ldi	r24, 0x41	; 65
 194:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_4_PIN);
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				break;
 1a0:	8a cf       	rjmp	.-236    	; 0xb6 <APP_start+0xe>
				case 6:
				LED_off(LED_PORT, LED_1_PIN);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_2_PIN);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_on(LED_PORT, LED_3_PIN);
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	81 e4       	ldi	r24, 0x41	; 65
 1b6:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				LED_on(LED_PORT, LED_4_PIN);
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				break;
 1c2:	79 cf       	rjmp	.-270    	; 0xb6 <APP_start+0xe>
				case 7:
				LED_off(LED_PORT, LED_1_PIN);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_2_PIN);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_3_PIN);
 1d4:	62 e0       	ldi	r22, 0x02	; 2
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_on(LED_PORT, LED_4_PIN);
 1dc:	63 e0       	ldi	r22, 0x03	; 3
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	0e 94 16 01 	call	0x22c	; 0x22c <LED_on>
				break;
 1e4:	68 cf       	rjmp	.-304    	; 0xb6 <APP_start+0xe>
				case 8:
				LED_off(LED_PORT, LED_1_PIN);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_2_PIN);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_3_PIN);
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				LED_off(LED_PORT, LED_4_PIN);
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	81 e4       	ldi	r24, 0x41	; 65
 202:	0e 94 1c 01 	call	0x238	; 0x238 <LED_off>
				pressNumber = 0;
 206:	10 e0       	ldi	r17, 0x00	; 0
				break;
 208:	56 cf       	rjmp	.-340    	; 0xb6 <APP_start+0xe>

0000020a <BUTTON_init>:


// Functions Implementation
EN_BUTTON_ErrorState_t  BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	if(DIO_init(buttonPort, buttonPin, IN) == DIO_OK)
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	0e 94 29 01 	call	0x252	; 0x252 <DIO_init>
 210:	81 11       	cpse	r24, r1
	{
		return BUTTON_OK;
	}
	else
	{
		return BUTTON_ERROR;
 212:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 214:	08 95       	ret

00000216 <BUTTON_GetState>:

EN_BUTTON_ErrorState_t  BUTTON_GetState(uint8_t buttonPort, uint8_t buttonPin,uint8_t *value)
{
	if(DIO_read(buttonPort, buttonPin, value) == DIO_OK)
 216:	0e 94 41 02 	call	0x482	; 0x482 <DIO_read>
 21a:	81 11       	cpse	r24, r1
	{
		return BUTTON_OK;
	}
	else
	{
		return BUTTON_ERROR;
 21c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 21e:	08 95       	ret

00000220 <LED_init>:


// Functions Implementation
EN_LED_ErrorState_t  LED_init(uint8_t ledPort, uint8_t ledPin)
{
	if (DIO_init(ledPort, ledPin, OUT) == DIO_OK)
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	0e 94 29 01 	call	0x252	; 0x252 <DIO_init>
 226:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 228:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 22a:	08 95       	ret

0000022c <LED_on>:
EN_LED_ErrorState_t  LED_on(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, HIGH) == DIO_OK)
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_write>
 232:	81 11       	cpse	r24, r1
	{
		return LED_OK;	
	}
	else
	{
		return LED_ERROR;
 234:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 236:	08 95       	ret

00000238 <LED_off>:
EN_LED_ErrorState_t  LED_off(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, LOW) == DIO_OK)
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_write>
 23e:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 240:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 242:	08 95       	ret

00000244 <main>:
#include "Application/application.h"


int main(void)
{
    APP_init();
 244:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();	
 248:	0e 94 54 00 	call	0xa8	; 0xa8 <APP_start>
}
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	08 95       	ret

00000252 <DIO_init>:
#include "dio.h"

// Functions Implementation
EN_DIO_ErrorState_t  DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 252:	82 34       	cpi	r24, 0x42	; 66
 254:	49 f1       	breq	.+82     	; 0x2a8 <DIO_init+0x56>
 256:	18 f4       	brcc	.+6      	; 0x25e <DIO_init+0xc>
 258:	81 34       	cpi	r24, 0x41	; 65
 25a:	41 f0       	breq	.+16     	; 0x26c <DIO_init+0x1a>
 25c:	7d c0       	rjmp	.+250    	; 0x358 <DIO_init+0x106>
 25e:	83 34       	cpi	r24, 0x43	; 67
 260:	09 f4       	brne	.+2      	; 0x264 <DIO_init+0x12>
 262:	40 c0       	rjmp	.+128    	; 0x2e4 <DIO_init+0x92>
 264:	84 34       	cpi	r24, 0x44	; 68
 266:	09 f4       	brne	.+2      	; 0x26a <DIO_init+0x18>
 268:	5a c0       	rjmp	.+180    	; 0x31e <DIO_init+0xcc>
 26a:	76 c0       	rjmp	.+236    	; 0x358 <DIO_init+0x106>
	{
		case PORT_A:
			if(direction == IN)
 26c:	41 11       	cpse	r20, r1
 26e:	0d c0       	rjmp	.+26     	; 0x28a <DIO_init+0x38>
			{
				CLEAR_BIT(DDRA,pinNumber);
 270:	2a b3       	in	r18, 0x1a	; 26
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_init+0x2a>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_init+0x26>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	08 95       	ret
		case PORT_A:
			if(direction == IN)
			{
				CLEAR_BIT(DDRA,pinNumber);
			}
			else if(direction == OUT)
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	09 f0       	breq	.+2      	; 0x290 <DIO_init+0x3e>
 28e:	65 c0       	rjmp	.+202    	; 0x35a <DIO_init+0x108>
			{
				SET_BIT(DDRA,pinNumber);
 290:	2a b3       	in	r18, 0x1a	; 26
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_init+0x4a>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_init+0x46>
 2a0:	82 2b       	or	r24, r18
 2a2:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
			
		case PORT_B:
			if(direction == IN)
 2a8:	41 11       	cpse	r20, r1
 2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <DIO_init+0x74>
			{
				CLEAR_BIT(DDRB,pinNumber);
 2ac:	27 b3       	in	r18, 0x17	; 23
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_init+0x66>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_init+0x62>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	08 95       	ret
		case PORT_B:
			if(direction == IN)
			{
				CLEAR_BIT(DDRB,pinNumber);
			}
			else if(direction == OUT)
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <DIO_init+0x7a>
 2ca:	49 c0       	rjmp	.+146    	; 0x35e <DIO_init+0x10c>
			{
				SET_BIT(DDRB,pinNumber);
 2cc:	27 b3       	in	r18, 0x17	; 23
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_init+0x86>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_init+0x82>
 2dc:	82 2b       	or	r24, r18
 2de:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	08 95       	ret
			
		case PORT_C:
			if(direction == IN)
 2e4:	41 11       	cpse	r20, r1
 2e6:	0d c0       	rjmp	.+26     	; 0x302 <DIO_init+0xb0>
			{
				CLEAR_BIT(DDRC,pinNumber);
 2e8:	24 b3       	in	r18, 0x14	; 20
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_init+0xa2>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_init+0x9e>
 2f8:	80 95       	com	r24
 2fa:	82 23       	and	r24, r18
 2fc:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
		case PORT_C:
			if(direction == IN)
			{
				CLEAR_BIT(DDRC,pinNumber);
			}
			else if(direction == OUT)
 302:	41 30       	cpi	r20, 0x01	; 1
 304:	71 f5       	brne	.+92     	; 0x362 <DIO_init+0x110>
			{
				SET_BIT(DDRC,pinNumber);
 306:	24 b3       	in	r18, 0x14	; 20
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_init+0xc0>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_init+0xbc>
 316:	82 2b       	or	r24, r18
 318:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
			
		case PORT_D:
			if(direction == IN)
 31e:	41 11       	cpse	r20, r1
 320:	0d c0       	rjmp	.+26     	; 0x33c <DIO_init+0xea>
			{
				CLEAR_BIT(DDRD,pinNumber);
 322:	21 b3       	in	r18, 0x11	; 17
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_init+0xdc>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_init+0xd8>
 332:	80 95       	com	r24
 334:	82 23       	and	r24, r18
 336:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
		case PORT_D:
			if(direction == IN)
			{
				CLEAR_BIT(DDRD,pinNumber);
			}
			else if(direction == OUT)
 33c:	41 30       	cpi	r20, 0x01	; 1
 33e:	99 f4       	brne	.+38     	; 0x366 <DIO_init+0x114>
			{
				SET_BIT(DDRD,pinNumber);
 340:	21 b3       	in	r18, 0x11	; 17
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_init+0xfa>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_init+0xf6>
 350:	82 2b       	or	r24, r18
 352:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
	}
}
 358:	08 95       	ret
			{
				SET_BIT(DDRA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	08 95       	ret
			{
				SET_BIT(DDRB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	08 95       	ret
			{
				SET_BIT(DDRC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	08 95       	ret
			{
				SET_BIT(DDRD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 366:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}
}
 368:	08 95       	ret

0000036a <DIO_write>:

EN_DIO_ErrorState_t  DIO_write(uint8_t portNumber, uint8_t pinNumber,uint8_t value)
{
	switch(portNumber)
 36a:	82 34       	cpi	r24, 0x42	; 66
 36c:	49 f1       	breq	.+82     	; 0x3c0 <DIO_write+0x56>
 36e:	18 f4       	brcc	.+6      	; 0x376 <DIO_write+0xc>
 370:	81 34       	cpi	r24, 0x41	; 65
 372:	41 f0       	breq	.+16     	; 0x384 <DIO_write+0x1a>
 374:	7d c0       	rjmp	.+250    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 376:	83 34       	cpi	r24, 0x43	; 67
 378:	09 f4       	brne	.+2      	; 0x37c <DIO_write+0x12>
 37a:	40 c0       	rjmp	.+128    	; 0x3fc <DIO_write+0x92>
 37c:	84 34       	cpi	r24, 0x44	; 68
 37e:	09 f4       	brne	.+2      	; 0x382 <DIO_write+0x18>
 380:	5a c0       	rjmp	.+180    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 382:	76 c0       	rjmp	.+236    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		case PORT_A:
			if(value == LOW)
 384:	41 11       	cpse	r20, r1
 386:	0d c0       	rjmp	.+26     	; 0x3a2 <DIO_write+0x38>
			{
				CLEAR_BIT(PORTA,pinNumber);
 388:	2b b3       	in	r18, 0x1b	; 27
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_write+0x2a>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_write+0x26>
 398:	80 95       	com	r24
 39a:	82 23       	and	r24, r18
 39c:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret
		case PORT_A:
			if(value == LOW)
			{
				CLEAR_BIT(PORTA,pinNumber);
			}
			else if(value == HIGH)
 3a2:	41 30       	cpi	r20, 0x01	; 1
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <DIO_write+0x3e>
 3a6:	65 c0       	rjmp	.+202    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			{
				SET_BIT(PORTA,pinNumber);
 3a8:	2b b3       	in	r18, 0x1b	; 27
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_write+0x4a>
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	6a 95       	dec	r22
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_write+0x46>
 3b8:	82 2b       	or	r24, r18
 3ba:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
		
		case PORT_B:
			if(value == LOW)
 3c0:	41 11       	cpse	r20, r1
 3c2:	0d c0       	rjmp	.+26     	; 0x3de <DIO_write+0x74>
			{
				CLEAR_BIT(PORTB,pinNumber);
 3c4:	28 b3       	in	r18, 0x18	; 24
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_write+0x66>
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_write+0x62>
 3d4:	80 95       	com	r24
 3d6:	82 23       	and	r24, r18
 3d8:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
		case PORT_B:
			if(value == LOW)
			{
				CLEAR_BIT(PORTB,pinNumber);
			}
			else if(value == HIGH)
 3de:	41 30       	cpi	r20, 0x01	; 1
 3e0:	09 f0       	breq	.+2      	; 0x3e4 <DIO_write+0x7a>
 3e2:	49 c0       	rjmp	.+146    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			{
				SET_BIT(PORTB,pinNumber);
 3e4:	28 b3       	in	r18, 0x18	; 24
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_write+0x86>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	6a 95       	dec	r22
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_write+0x82>
 3f4:	82 2b       	or	r24, r18
 3f6:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret
		
		case PORT_C:
			if(value == LOW)
 3fc:	41 11       	cpse	r20, r1
 3fe:	0d c0       	rjmp	.+26     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			{
				CLEAR_BIT(PORTC,pinNumber);
 400:	25 b3       	in	r18, 0x15	; 21
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	80 95       	com	r24
 412:	82 23       	and	r24, r18
 414:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	08 95       	ret
		case PORT_C:
			if(value == LOW)
			{
				CLEAR_BIT(PORTC,pinNumber);
			}
			else if(value == HIGH)
 41a:	41 30       	cpi	r20, 0x01	; 1
 41c:	71 f5       	brne	.+92     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			{
				SET_BIT(PORTC,pinNumber);
 41e:	25 b3       	in	r18, 0x15	; 21
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 95       	ret
		
		case PORT_D:
			if(value == LOW)
 436:	41 11       	cpse	r20, r1
 438:	0d c0       	rjmp	.+26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			{
				CLEAR_BIT(PORTD,pinNumber);
 43a:	22 b3       	in	r18, 0x12	; 18
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	80 95       	com	r24
 44c:	82 23       	and	r24, r18
 44e:	82 bb       	out	0x12, r24	; 18
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
		case PORT_D:
			if(value == LOW)
			{
				CLEAR_BIT(PORTD,pinNumber);
			}
			else if(value == HIGH)
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	99 f4       	brne	.+38     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			{
				SET_BIT(PORTD,pinNumber);
 458:	22 b3       	in	r18, 0x12	; 18
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	82 2b       	or	r24, r18
 46a:	82 bb       	out	0x12, r24	; 18
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	08 95       	ret
	}	
}
 470:	08 95       	ret
			{
				SET_BIT(PORTA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	08 95       	ret
			{
				SET_BIT(PORTB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	08 95       	ret
			{
				SET_BIT(PORTC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	08 95       	ret
			{
				SET_BIT(PORTD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 47e:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}	
}
 480:	08 95       	ret

00000482 <DIO_read>:

EN_DIO_ErrorState_t  DIO_read(uint8_t portNumber, uint8_t pinNumber,uint8_t *value)
{
	switch(portNumber)
 482:	82 34       	cpi	r24, 0x42	; 66
 484:	a9 f0       	breq	.+42     	; 0x4b0 <DIO_read+0x2e>
 486:	18 f4       	brcc	.+6      	; 0x48e <DIO_read+0xc>
 488:	81 34       	cpi	r24, 0x41	; 65
 48a:	31 f0       	breq	.+12     	; 0x498 <DIO_read+0x16>
 48c:	35 c0       	rjmp	.+106    	; 0x4f8 <DIO_read+0x76>
 48e:	83 34       	cpi	r24, 0x43	; 67
 490:	d9 f0       	breq	.+54     	; 0x4c8 <DIO_read+0x46>
 492:	84 34       	cpi	r24, 0x44	; 68
 494:	29 f1       	breq	.+74     	; 0x4e0 <DIO_read+0x5e>
 496:	30 c0       	rjmp	.+96     	; 0x4f8 <DIO_read+0x76>
	{
		case PORT_A:
			*value = GET_BIT(PINA, pinNumber);
 498:	89 b3       	in	r24, 0x19	; 25
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_read+0x20>
 49e:	95 95       	asr	r25
 4a0:	87 95       	ror	r24
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_read+0x1c>
 4a6:	81 70       	andi	r24, 0x01	; 1
 4a8:	fa 01       	movw	r30, r20
 4aa:	80 83       	st	Z, r24
			return DIO_OK;
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	08 95       	ret
		
		case PORT_B:
			*value = GET_BIT(PINB, pinNumber);
 4b0:	86 b3       	in	r24, 0x16	; 22
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_read+0x38>
 4b6:	95 95       	asr	r25
 4b8:	87 95       	ror	r24
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_read+0x34>
 4be:	81 70       	andi	r24, 0x01	; 1
 4c0:	fa 01       	movw	r30, r20
 4c2:	80 83       	st	Z, r24
			return DIO_OK;
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret
		
		case PORT_C:
			*value = GET_BIT(PINC, pinNumber);
 4c8:	83 b3       	in	r24, 0x13	; 19
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_read+0x50>
 4ce:	95 95       	asr	r25
 4d0:	87 95       	ror	r24
 4d2:	6a 95       	dec	r22
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_read+0x4c>
 4d6:	81 70       	andi	r24, 0x01	; 1
 4d8:	fa 01       	movw	r30, r20
 4da:	80 83       	st	Z, r24
			return DIO_OK;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret
		
		case PORT_D:
			*value = GET_BIT(PIND, pinNumber);
 4e0:	80 b3       	in	r24, 0x10	; 16
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_read+0x68>
 4e6:	95 95       	asr	r25
 4e8:	87 95       	ror	r24
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_read+0x64>
 4ee:	81 70       	andi	r24, 0x01	; 1
 4f0:	fa 01       	movw	r30, r20
 4f2:	80 83       	st	Z, r24
			return DIO_OK;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret
			
		default:
			return DIO_ERROR; 
 4f8:	81 e0       	ldi	r24, 0x01	; 1
	}	
}
 4fa:	08 95       	ret

000004fc <__tablejump2__>:
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	05 90       	lpm	r0, Z+
 502:	f4 91       	lpm	r31, Z
 504:	e0 2d       	mov	r30, r0
 506:	09 94       	ijmp

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
