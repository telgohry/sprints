
LED-squence-v1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d05  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007da  00000000  00000000  000012a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b4  00000000  00000000  00001a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b1  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000606  00000000  00000000  00002839  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00002e3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  74:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
uint8_t led_state[4] = {0};

// Functions Implementation 
EN_APP_ErrorState_t  APP_init(void)
{
	if(LED_init(LED_PORT, LED_1_PIN) == LED_OK && LED_init(LED_PORT, LED_2_PIN) == LED_OK && LED_init(LED_PORT, LED_3_PIN) == LED_OK && LED_init(LED_PORT, LED_4_PIN) == LED_OK
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 94 00 	call	0x128	; 0x128 <LED_init>
  84:	81 11       	cpse	r24, r1
  86:	19 c0       	rjmp	.+50     	; 0xba <APP_init+0x3e>
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	81 e4       	ldi	r24, 0x41	; 65
  8c:	0e 94 94 00 	call	0x128	; 0x128 <LED_init>
  90:	81 11       	cpse	r24, r1
  92:	15 c0       	rjmp	.+42     	; 0xbe <APP_init+0x42>
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 94 00 	call	0x128	; 0x128 <LED_init>
  9c:	81 11       	cpse	r24, r1
  9e:	11 c0       	rjmp	.+34     	; 0xc2 <APP_init+0x46>
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	0e 94 94 00 	call	0x128	; 0x128 <LED_init>
  a8:	81 11       	cpse	r24, r1
  aa:	0d c0       	rjmp	.+26     	; 0xc6 <APP_init+0x4a>
	 && BUTTON_init(BUTTON_PORT, BUTTON_PIN) == BUTTON_OK)
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	83 e4       	ldi	r24, 0x43	; 67
  b0:	0e 94 89 00 	call	0x112	; 0x112 <BUTTON_init>
  b4:	81 11       	cpse	r24, r1
  b6:	09 c0       	rjmp	.+18     	; 0xca <APP_init+0x4e>
  b8:	08 95       	ret
	{
		return APP_OK;
	}
	else
	{
		return APP_ERROR; 
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	08 95       	ret
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	08 95       	ret
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
  ca:	81 e0       	ldi	r24, 0x01	; 1
	}
}
  cc:	08 95       	ret

000000ce <APP_start>:

EN_APP_ErrorState_t  APP_start(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	1f 92       	push	r1
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	uint8_t buttonState = LOW; 
  d8:	19 82       	std	Y+1, r1	; 0x01
	
	/* Led default state initialization */
	LED_off(LED_PORT, LED_1_PIN);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 9a 00 	call	0x134	; 0x134 <LED_off>
	LED_off(LED_PORT, LED_2_PIN);
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 9a 00 	call	0x134	; 0x134 <LED_off>
	LED_off(LED_PORT, LED_3_PIN);
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 9a 00 	call	0x134	; 0x134 <LED_off>
	LED_off(LED_PORT, LED_4_PIN);
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	81 e4       	ldi	r24, 0x41	; 65
  f6:	0e 94 9a 00 	call	0x134	; 0x134 <LED_off>
	
	BUTTON_GetState(BUTTON_PORT, BUTTON_PIN, &buttonState);
  fa:	ae 01       	movw	r20, r28
  fc:	4f 5f       	subi	r20, 0xFF	; 255
  fe:	5f 4f       	sbci	r21, 0xFF	; 255
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	83 e4       	ldi	r24, 0x43	; 67
 104:	0e 94 8f 00 	call	0x11e	; 0x11e <BUTTON_GetState>

	
	
	return APP_OK;
}
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <BUTTON_init>:


// Functions Implementation
EN_BUTTON_ErrorState_t  BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	if(DIO_init(buttonPort, buttonPin, IN) == DIO_OK)
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_init>
 118:	81 11       	cpse	r24, r1
	{
		return BUTTON_OK;
	}
	else
	{
		return BUTTON_ERROR;
 11a:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 11c:	08 95       	ret

0000011e <BUTTON_GetState>:

EN_BUTTON_ErrorState_t  BUTTON_GetState(uint8_t buttonPort, uint8_t buttonPin,uint8_t *value)
{
	if(DIO_read(buttonPort, buttonPin, value) == DIO_OK)
 11e:	0e 94 bd 01 	call	0x37a	; 0x37a <DIO_read>
 122:	81 11       	cpse	r24, r1
	{
		return BUTTON_OK;
	}
	else
	{
		return BUTTON_ERROR;
 124:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 126:	08 95       	ret

00000128 <LED_init>:
	}
	else
	{
		return LED_ERROR;
	}
}
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_init>
 12e:	81 11       	cpse	r24, r1
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	08 95       	ret

00000134 <LED_off>:
EN_LED_ErrorState_t  LED_off(uint8_t ledPort, uint8_t ledPin)
{
	if(DIO_write(ledPort, ledPin, LOW) == DIO_OK)
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	0e 94 31 01 	call	0x262	; 0x262 <DIO_write>
 13a:	81 11       	cpse	r24, r1
	{
		return LED_OK;
	}
	else
	{
		return LED_ERROR;
 13c:	81 e0       	ldi	r24, 0x01	; 1
	}
}
 13e:	08 95       	ret

00000140 <main>:
#include "Application/application.h"


int main(void)
{
    APP_init();
 140:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	
    while (1) 
    {
		APP_start();	
 144:	0e 94 67 00 	call	0xce	; 0xce <APP_start>
 148:	fd cf       	rjmp	.-6      	; 0x144 <main+0x4>

0000014a <DIO_init>:
#include "dio.h"

// Functions Implementation
EN_DIO_ErrorState_t  DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 14a:	82 34       	cpi	r24, 0x42	; 66
 14c:	49 f1       	breq	.+82     	; 0x1a0 <DIO_init+0x56>
 14e:	18 f4       	brcc	.+6      	; 0x156 <DIO_init+0xc>
 150:	81 34       	cpi	r24, 0x41	; 65
 152:	41 f0       	breq	.+16     	; 0x164 <DIO_init+0x1a>
 154:	7d c0       	rjmp	.+250    	; 0x250 <DIO_init+0x106>
 156:	83 34       	cpi	r24, 0x43	; 67
 158:	09 f4       	brne	.+2      	; 0x15c <DIO_init+0x12>
 15a:	40 c0       	rjmp	.+128    	; 0x1dc <DIO_init+0x92>
 15c:	84 34       	cpi	r24, 0x44	; 68
 15e:	09 f4       	brne	.+2      	; 0x162 <DIO_init+0x18>
 160:	5a c0       	rjmp	.+180    	; 0x216 <DIO_init+0xcc>
 162:	76 c0       	rjmp	.+236    	; 0x250 <DIO_init+0x106>
	{
		case PORT_A:
			if(direction == IN)
 164:	41 11       	cpse	r20, r1
 166:	0d c0       	rjmp	.+26     	; 0x182 <DIO_init+0x38>
			{
				CLEAR_BIT(DDRA,pinNumber);
 168:	2a b3       	in	r18, 0x1a	; 26
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_init+0x2a>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_init+0x26>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	08 95       	ret
		case PORT_A:
			if(direction == IN)
			{
				CLEAR_BIT(DDRA,pinNumber);
			}
			else if(direction == OUT)
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	09 f0       	breq	.+2      	; 0x188 <DIO_init+0x3e>
 186:	65 c0       	rjmp	.+202    	; 0x252 <DIO_init+0x108>
			{
				SET_BIT(DDRA,pinNumber);
 188:	2a b3       	in	r18, 0x1a	; 26
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_init+0x4a>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_init+0x46>
 198:	82 2b       	or	r24, r18
 19a:	8a bb       	out	0x1a, r24	; 26
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
			
		case PORT_B:
			if(direction == IN)
 1a0:	41 11       	cpse	r20, r1
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <DIO_init+0x74>
			{
				CLEAR_BIT(DDRB,pinNumber);
 1a4:	27 b3       	in	r18, 0x17	; 23
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_init+0x66>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_init+0x62>
 1b4:	80 95       	com	r24
 1b6:	82 23       	and	r24, r18
 1b8:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
		case PORT_B:
			if(direction == IN)
			{
				CLEAR_BIT(DDRB,pinNumber);
			}
			else if(direction == OUT)
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <DIO_init+0x7a>
 1c2:	49 c0       	rjmp	.+146    	; 0x256 <DIO_init+0x10c>
			{
				SET_BIT(DDRB,pinNumber);
 1c4:	27 b3       	in	r18, 0x17	; 23
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_init+0x86>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_init+0x82>
 1d4:	82 2b       	or	r24, r18
 1d6:	87 bb       	out	0x17, r24	; 23
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret
			
		case PORT_C:
			if(direction == IN)
 1dc:	41 11       	cpse	r20, r1
 1de:	0d c0       	rjmp	.+26     	; 0x1fa <DIO_init+0xb0>
			{
				CLEAR_BIT(DDRC,pinNumber);
 1e0:	24 b3       	in	r18, 0x14	; 20
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_init+0xa2>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_init+0x9e>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret
		case PORT_C:
			if(direction == IN)
			{
				CLEAR_BIT(DDRC,pinNumber);
			}
			else if(direction == OUT)
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	71 f5       	brne	.+92     	; 0x25a <DIO_init+0x110>
			{
				SET_BIT(DDRC,pinNumber);
 1fe:	24 b3       	in	r18, 0x14	; 20
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_init+0xc0>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_init+0xbc>
 20e:	82 2b       	or	r24, r18
 210:	84 bb       	out	0x14, r24	; 20
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	08 95       	ret
			
		case PORT_D:
			if(direction == IN)
 216:	41 11       	cpse	r20, r1
 218:	0d c0       	rjmp	.+26     	; 0x234 <DIO_init+0xea>
			{
				CLEAR_BIT(DDRD,pinNumber);
 21a:	21 b3       	in	r18, 0x11	; 17
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_init+0xdc>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_init+0xd8>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	08 95       	ret
		case PORT_D:
			if(direction == IN)
			{
				CLEAR_BIT(DDRD,pinNumber);
			}
			else if(direction == OUT)
 234:	41 30       	cpi	r20, 0x01	; 1
 236:	99 f4       	brne	.+38     	; 0x25e <DIO_init+0x114>
			{
				SET_BIT(DDRD,pinNumber);
 238:	21 b3       	in	r18, 0x11	; 17
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_init+0xfa>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_init+0xf6>
 248:	82 2b       	or	r24, r18
 24a:	81 bb       	out	0x11, r24	; 17
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
	}
}
 250:	08 95       	ret
			{
				SET_BIT(DDRA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
			{
				SET_BIT(DDRB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
			{
				SET_BIT(DDRC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	08 95       	ret
			{
				SET_BIT(DDRD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 25e:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}
}
 260:	08 95       	ret

00000262 <DIO_write>:

EN_DIO_ErrorState_t  DIO_write(uint8_t portNumber, uint8_t pinNumber,uint8_t value)
{
	switch(portNumber)
 262:	82 34       	cpi	r24, 0x42	; 66
 264:	49 f1       	breq	.+82     	; 0x2b8 <DIO_write+0x56>
 266:	18 f4       	brcc	.+6      	; 0x26e <DIO_write+0xc>
 268:	81 34       	cpi	r24, 0x41	; 65
 26a:	41 f0       	breq	.+16     	; 0x27c <DIO_write+0x1a>
 26c:	7d c0       	rjmp	.+250    	; 0x368 <DIO_write+0x106>
 26e:	83 34       	cpi	r24, 0x43	; 67
 270:	09 f4       	brne	.+2      	; 0x274 <DIO_write+0x12>
 272:	40 c0       	rjmp	.+128    	; 0x2f4 <DIO_write+0x92>
 274:	84 34       	cpi	r24, 0x44	; 68
 276:	09 f4       	brne	.+2      	; 0x27a <DIO_write+0x18>
 278:	5a c0       	rjmp	.+180    	; 0x32e <DIO_write+0xcc>
 27a:	76 c0       	rjmp	.+236    	; 0x368 <DIO_write+0x106>
	{
		case PORT_A:
			if(value == LOW)
 27c:	41 11       	cpse	r20, r1
 27e:	0d c0       	rjmp	.+26     	; 0x29a <DIO_write+0x38>
			{
				CLEAR_BIT(PORTA,pinNumber);
 280:	2b b3       	in	r18, 0x1b	; 27
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_write+0x2a>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_write+0x26>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	08 95       	ret
		case PORT_A:
			if(value == LOW)
			{
				CLEAR_BIT(PORTA,pinNumber);
			}
			else if(value == HIGH)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	09 f0       	breq	.+2      	; 0x2a0 <DIO_write+0x3e>
 29e:	65 c0       	rjmp	.+202    	; 0x36a <DIO_write+0x108>
			{
				SET_BIT(PORTA,pinNumber);
 2a0:	2b b3       	in	r18, 0x1b	; 27
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_write+0x4a>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_write+0x46>
 2b0:	82 2b       	or	r24, r18
 2b2:	8b bb       	out	0x1b, r24	; 27
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
		
		case PORT_B:
			if(value == LOW)
 2b8:	41 11       	cpse	r20, r1
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <DIO_write+0x74>
			{
				CLEAR_BIT(PORTB,pinNumber);
 2bc:	28 b3       	in	r18, 0x18	; 24
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_write+0x66>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_write+0x62>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret
		case PORT_B:
			if(value == LOW)
			{
				CLEAR_BIT(PORTB,pinNumber);
			}
			else if(value == HIGH)
 2d6:	41 30       	cpi	r20, 0x01	; 1
 2d8:	09 f0       	breq	.+2      	; 0x2dc <DIO_write+0x7a>
 2da:	49 c0       	rjmp	.+146    	; 0x36e <DIO_write+0x10c>
			{
				SET_BIT(PORTB,pinNumber);
 2dc:	28 b3       	in	r18, 0x18	; 24
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_write+0x86>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_write+0x82>
 2ec:	82 2b       	or	r24, r18
 2ee:	88 bb       	out	0x18, r24	; 24
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret
		
		case PORT_C:
			if(value == LOW)
 2f4:	41 11       	cpse	r20, r1
 2f6:	0d c0       	rjmp	.+26     	; 0x312 <DIO_write+0xb0>
			{
				CLEAR_BIT(PORTC,pinNumber);
 2f8:	25 b3       	in	r18, 0x15	; 21
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_write+0xa2>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_write+0x9e>
 308:	80 95       	com	r24
 30a:	82 23       	and	r24, r18
 30c:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret
		case PORT_C:
			if(value == LOW)
			{
				CLEAR_BIT(PORTC,pinNumber);
			}
			else if(value == HIGH)
 312:	41 30       	cpi	r20, 0x01	; 1
 314:	71 f5       	brne	.+92     	; 0x372 <DIO_write+0x110>
			{
				SET_BIT(PORTC,pinNumber);
 316:	25 b3       	in	r18, 0x15	; 21
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_write+0xc0>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_write+0xbc>
 326:	82 2b       	or	r24, r18
 328:	85 bb       	out	0x15, r24	; 21
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
		
		case PORT_D:
			if(value == LOW)
 32e:	41 11       	cpse	r20, r1
 330:	0d c0       	rjmp	.+26     	; 0x34c <DIO_write+0xea>
			{
				CLEAR_BIT(PORTD,pinNumber);
 332:	22 b3       	in	r18, 0x12	; 18
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_write+0xdc>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_write+0xd8>
 342:	80 95       	com	r24
 344:	82 23       	and	r24, r18
 346:	82 bb       	out	0x12, r24	; 18
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
		case PORT_D:
			if(value == LOW)
			{
				CLEAR_BIT(PORTD,pinNumber);
			}
			else if(value == HIGH)
 34c:	41 30       	cpi	r20, 0x01	; 1
 34e:	99 f4       	brne	.+38     	; 0x376 <DIO_write+0x114>
			{
				SET_BIT(PORTD,pinNumber);
 350:	22 b3       	in	r18, 0x12	; 18
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_write+0xfa>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_write+0xf6>
 360:	82 2b       	or	r24, r18
 362:	82 bb       	out	0x12, r24	; 18
			}
			else
			{
				return DIO_ERROR;
			}
			return DIO_OK;
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
	}	
}
 368:	08 95       	ret
			{
				SET_BIT(PORTA,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret
			{
				SET_BIT(PORTB,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	08 95       	ret
			{
				SET_BIT(PORTC,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret
			{
				SET_BIT(PORTD,pinNumber);
			}
			else
			{
				return DIO_ERROR;
 376:	81 e0       	ldi	r24, 0x01	; 1
			}
			return DIO_OK;
	}	
}
 378:	08 95       	ret

0000037a <DIO_read>:

EN_DIO_ErrorState_t  DIO_read(uint8_t portNumber, uint8_t pinNumber,uint8_t *value)
{
	switch(portNumber)
 37a:	82 34       	cpi	r24, 0x42	; 66
 37c:	a9 f0       	breq	.+42     	; 0x3a8 <DIO_read+0x2e>
 37e:	18 f4       	brcc	.+6      	; 0x386 <DIO_read+0xc>
 380:	81 34       	cpi	r24, 0x41	; 65
 382:	31 f0       	breq	.+12     	; 0x390 <DIO_read+0x16>
 384:	35 c0       	rjmp	.+106    	; 0x3f0 <DIO_read+0x76>
 386:	83 34       	cpi	r24, 0x43	; 67
 388:	d9 f0       	breq	.+54     	; 0x3c0 <DIO_read+0x46>
 38a:	84 34       	cpi	r24, 0x44	; 68
 38c:	29 f1       	breq	.+74     	; 0x3d8 <DIO_read+0x5e>
 38e:	30 c0       	rjmp	.+96     	; 0x3f0 <DIO_read+0x76>
	{
		case PORT_A:
			*value = GET_BIT(PINA, pinNumber);
 390:	89 b3       	in	r24, 0x19	; 25
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_read+0x20>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_read+0x1c>
 39e:	81 70       	andi	r24, 0x01	; 1
 3a0:	fa 01       	movw	r30, r20
 3a2:	80 83       	st	Z, r24
			return DIO_OK;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret
		
		case PORT_B:
			*value = GET_BIT(PINB, pinNumber);
 3a8:	86 b3       	in	r24, 0x16	; 22
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_read+0x38>
 3ae:	95 95       	asr	r25
 3b0:	87 95       	ror	r24
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_read+0x34>
 3b6:	81 70       	andi	r24, 0x01	; 1
 3b8:	fa 01       	movw	r30, r20
 3ba:	80 83       	st	Z, r24
			return DIO_OK;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret
		
		case PORT_C:
			*value = GET_BIT(PINC, pinNumber);
 3c0:	83 b3       	in	r24, 0x13	; 19
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_read+0x50>
 3c6:	95 95       	asr	r25
 3c8:	87 95       	ror	r24
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_read+0x4c>
 3ce:	81 70       	andi	r24, 0x01	; 1
 3d0:	fa 01       	movw	r30, r20
 3d2:	80 83       	st	Z, r24
			return DIO_OK;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	08 95       	ret
		
		case PORT_D:
			*value = GET_BIT(PIND, pinNumber);
 3d8:	80 b3       	in	r24, 0x10	; 16
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_read+0x68>
 3de:	95 95       	asr	r25
 3e0:	87 95       	ror	r24
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_read+0x64>
 3e6:	81 70       	andi	r24, 0x01	; 1
 3e8:	fa 01       	movw	r30, r20
 3ea:	80 83       	st	Z, r24
			return DIO_OK;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
			
		default:
			return DIO_ERROR; 
 3f0:	81 e0       	ldi	r24, 0x01	; 1
	}	
}
 3f2:	08 95       	ret

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
